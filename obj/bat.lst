                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module bat
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _background_restore_world_coords
                             12 	.globl _cpct_getScreenPtr
                             13 	.globl _cpct_drawSpriteMaskedAlignedTable
                             14 	.globl _cpct_drawSprite
                             15 	.globl _batW
                             16 	.globl _oldBatX
                             17 	.globl _batX
                             18 	.globl _batY
                             19 	.globl _bat_initialize
                             20 	.globl _bat_update
                             21 	.globl _bat_restore_background
                             22 	.globl _bat_draw
                             23 	.globl _bat_bounce_ball
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area _DATA
                             31 ;--------------------------------------------------------
                             32 ; ram data
                             33 ;--------------------------------------------------------
                             34 	.area _INITIALIZED
   0000                      35 _batY::
   0000                      36 	.ds 1
   0001                      37 _batX::
   0001                      38 	.ds 1
   0002                      39 _oldBatX::
   0002                      40 	.ds 1
   0003                      41 _batW::
   0003                      42 	.ds 1
                             43 ;--------------------------------------------------------
                             44 ; absolute external ram data
                             45 ;--------------------------------------------------------
                             46 	.area _DABS (ABS)
                             47 ;--------------------------------------------------------
                             48 ; global & static initialisations
                             49 ;--------------------------------------------------------
                             50 	.area _HOME
                             51 	.area _GSINIT
                             52 	.area _GSFINAL
                             53 	.area _GSINIT
                             54 ;--------------------------------------------------------
                             55 ; Home
                             56 ;--------------------------------------------------------
                             57 	.area _HOME
                             58 	.area _HOME
                             59 ;--------------------------------------------------------
                             60 ; code
                             61 ;--------------------------------------------------------
                             62 	.area _CODE
                             63 ;src/bat.c:35: void bat_initialize() {
                             64 ;	---------------------------------
                             65 ; Function bat_initialize
                             66 ; ---------------------------------
   0000                      67 _bat_initialize::
                             68 ;src/bat.c:36: batW = 8;
   0000 21r03r00      [10]   69 	ld	hl,#_batW + 0
   0003 36 08         [10]   70 	ld	(hl), #0x08
                             71 ;src/bat.c:37: batX = (PLAY_AREA_WIDTH- batW) / 2;
   0005 21r01r00      [10]   72 	ld	hl,#_batX + 0
   0008 36 16         [10]   73 	ld	(hl), #0x16
                             74 ;src/bat.c:38: batY = PLAY_AREA_HEIGHT - BAT_HEIGHT_PIXELS - BAT_BOTTOM_OFFSET_PIXELS;
   000A 21r00r00      [10]   75 	ld	hl,#_batY + 0
   000D 36 B0         [10]   76 	ld	(hl), #0xb0
                             77 ;src/bat.c:39: oldBatX = batX;
   000F 21r02r00      [10]   78 	ld	hl,#_oldBatX + 0
   0012 36 16         [10]   79 	ld	(hl), #0x16
   0014 C9            [10]   80 	ret
                             81 ;src/bat.c:43: void bat_update() {
                             82 ;	---------------------------------
                             83 ; Function bat_update
                             84 ; ---------------------------------
   0015                      85 _bat_update::
                             86 ;src/bat.c:46: oldBatX = batX;
   0015 21r01r00      [10]   87 	ld	hl,#_batX + 0
   0018 4E            [ 7]   88 	ld	c, (hl)
                             89 ;src/bat.c:44: if (key_left_is_pressed) {
   0019 3Ar00r00      [13]   90 	ld	a,(#_key_left_is_pressed + 0)
   001C B7            [ 4]   91 	or	a, a
   001D 28 0E         [12]   92 	jr	Z,00108$
                             93 ;src/bat.c:45: if (batX > 0) {
   001F 3Ar01r00      [13]   94 	ld	a,(#_batX + 0)
   0022 B7            [ 4]   95 	or	a, a
   0023 C8            [11]   96 	ret	Z
                             97 ;src/bat.c:46: oldBatX = batX;
   0024 21r02r00      [10]   98 	ld	hl,#_oldBatX + 0
   0027 71            [ 7]   99 	ld	(hl), c
                            100 ;src/bat.c:47: batX--;
   0028 21r01r00      [10]  101 	ld	hl, #_batX+0
   002B 35            [11]  102 	dec	(hl)
   002C C9            [10]  103 	ret
   002D                     104 00108$:
                            105 ;src/bat.c:49: } else if (key_right_is_pressed) {
   002D 3Ar00r00      [13]  106 	ld	a,(#_key_right_is_pressed + 0)
   0030 B7            [ 4]  107 	or	a, a
   0031 C8            [11]  108 	ret	Z
                            109 ;src/bat.c:50: if (batX < PLAY_AREA_WIDTH - batW) {
   0032 21r03r00      [10]  110 	ld	hl,#_batW + 0
   0035 5E            [ 7]  111 	ld	e, (hl)
   0036 16 00         [ 7]  112 	ld	d, #0x00
   0038 3E 34         [ 7]  113 	ld	a, #0x34
   003A 93            [ 4]  114 	sub	a, e
   003B 47            [ 4]  115 	ld	b, a
   003C 3E 00         [ 7]  116 	ld	a, #0x00
   003E 9A            [ 4]  117 	sbc	a, d
   003F 5F            [ 4]  118 	ld	e, a
   0040 3Ar01r00      [13]  119 	ld	a,(#_batX + 0)
   0043 16 00         [ 7]  120 	ld	d, #0x00
   0045 90            [ 4]  121 	sub	a, b
   0046 7A            [ 4]  122 	ld	a, d
   0047 9B            [ 4]  123 	sbc	a, e
   0048 E2r4Dr00      [10]  124 	jp	PO, 00128$
   004B EE 80         [ 7]  125 	xor	a, #0x80
   004D                     126 00128$:
   004D F0            [11]  127 	ret	P
                            128 ;src/bat.c:51: oldBatX = batX;
   004E 21r02r00      [10]  129 	ld	hl,#_oldBatX + 0
   0051 71            [ 7]  130 	ld	(hl), c
                            131 ;src/bat.c:52: batX++;
   0052 21r01r00      [10]  132 	ld	hl, #_batX+0
   0055 34            [11]  133 	inc	(hl)
   0056 C9            [10]  134 	ret
                            135 ;src/bat.c:57: void bat_restore_background() {
                            136 ;	---------------------------------
                            137 ; Function bat_restore_background
                            138 ; ---------------------------------
   0057                     139 _bat_restore_background::
                            140 ;src/bat.c:58: background_restore_world_coords(oldBatX, batY, batW, BAT_HEIGHT_PIXELS);
   0057 21r00r00      [10]  141 	ld	hl,#_batY + 0
   005A 5E            [ 7]  142 	ld	e, (hl)
   005B 16 00         [ 7]  143 	ld	d, #0x00
   005D 21r02r00      [10]  144 	ld	hl,#_oldBatX + 0
   0060 4E            [ 7]  145 	ld	c, (hl)
   0061 06 00         [ 7]  146 	ld	b, #0x00
   0063 3E 08         [ 7]  147 	ld	a, #0x08
   0065 F5            [11]  148 	push	af
   0066 33            [ 6]  149 	inc	sp
   0067 3Ar03r00      [13]  150 	ld	a, (_batW)
   006A F5            [11]  151 	push	af
   006B 33            [ 6]  152 	inc	sp
   006C D5            [11]  153 	push	de
   006D C5            [11]  154 	push	bc
   006E CDr00r00      [17]  155 	call	_background_restore_world_coords
   0071 21 06 00      [10]  156 	ld	hl, #6
   0074 39            [11]  157 	add	hl, sp
   0075 F9            [ 6]  158 	ld	sp, hl
   0076 C9            [10]  159 	ret
                            160 ;src/bat.c:61: void bat_draw()
                            161 ;	---------------------------------
                            162 ; Function bat_draw
                            163 ; ---------------------------------
   0077                     164 _bat_draw::
                            165 ;src/bat.c:65: svmem = cpct_getScreenPtr(CPCT_VMEM_START, W_2_S_X(batX), W_2_S_Y(batY));
   0077 3Ar00r00      [13]  166 	ld	a,(#_batY + 0)
   007A C6 08         [ 7]  167 	add	a, #0x08
   007C 57            [ 4]  168 	ld	d, a
   007D 3Ar01r00      [13]  169 	ld	a,(#_batX + 0)
   0080 C6 0C         [ 7]  170 	add	a, #0x0c
   0082 5F            [ 4]  171 	ld	e,a
   0083 D5            [11]  172 	push	de
   0084 21 00 C0      [10]  173 	ld	hl, #0xc000
   0087 E5            [11]  174 	push	hl
   0088 CDr00r00      [17]  175 	call	_cpct_getScreenPtr
   008B 4D            [ 4]  176 	ld	c, l
   008C 44            [ 4]  177 	ld	b, h
                            178 ;src/bat.c:68: SP_BAT_LEFT_H, g_masktable);
                            179 ;src/bat.c:67: cpct_drawSpriteMaskedAlignedTable(sp_bat_left, svmem, SP_BAT_LEFT_W, 
   008D 59            [ 4]  180 	ld	e, c
   008E 50            [ 4]  181 	ld	d, b
   008F C5            [11]  182 	push	bc
   0090 21r00r00      [10]  183 	ld	hl, #_g_masktable
   0093 E5            [11]  184 	push	hl
   0094 21 02 08      [10]  185 	ld	hl, #0x0802
   0097 E5            [11]  186 	push	hl
   0098 D5            [11]  187 	push	de
   0099 21r00r00      [10]  188 	ld	hl, #_sp_bat_left
   009C E5            [11]  189 	push	hl
   009D CDr00r00      [17]  190 	call	_cpct_drawSpriteMaskedAlignedTable
   00A0 C1            [10]  191 	pop	bc
                            192 ;src/bat.c:70: cpct_drawSprite(sp_bat_mid, svmem + BAT_SEGMENT_WIDTH_BYTES, SP_BAT_MID_W, SP_BAT_MID_H);
   00A1 59            [ 4]  193 	ld	e, c
   00A2 50            [ 4]  194 	ld	d, b
   00A3 13            [ 6]  195 	inc	de
   00A4 13            [ 6]  196 	inc	de
   00A5 C5            [11]  197 	push	bc
   00A6 21 02 08      [10]  198 	ld	hl, #0x0802
   00A9 E5            [11]  199 	push	hl
   00AA D5            [11]  200 	push	de
   00AB 21r00r00      [10]  201 	ld	hl, #_sp_bat_mid
   00AE E5            [11]  202 	push	hl
   00AF CDr00r00      [17]  203 	call	_cpct_drawSprite
   00B2 C1            [10]  204 	pop	bc
                            205 ;src/bat.c:71: cpct_drawSprite(sp_bat_mid, svmem + 2*BAT_SEGMENT_WIDTH_BYTES, SP_BAT_MID_W, SP_BAT_MID_H);
   00B3 21 04 00      [10]  206 	ld	hl, #0x0004
   00B6 09            [11]  207 	add	hl, bc
   00B7 C5            [11]  208 	push	bc
   00B8 11 02 08      [10]  209 	ld	de, #0x0802
   00BB D5            [11]  210 	push	de
   00BC E5            [11]  211 	push	hl
   00BD 21r00r00      [10]  212 	ld	hl, #_sp_bat_mid
   00C0 E5            [11]  213 	push	hl
   00C1 CDr00r00      [17]  214 	call	_cpct_drawSprite
   00C4 C1            [10]  215 	pop	bc
                            216 ;src/bat.c:74: SP_BAT_RIGHT_H, g_masktable);
   00C5 11r00r00      [10]  217 	ld	de, #_g_masktable
                            218 ;src/bat.c:73: cpct_drawSpriteMaskedAlignedTable(sp_bat_right, svmem + 3*BAT_SEGMENT_WIDTH_BYTES, SP_BAT_RIGHT_W, 
   00C8 21 06 00      [10]  219 	ld	hl, #0x0006
   00CB 09            [11]  220 	add	hl, bc
   00CC 01r00r00      [10]  221 	ld	bc, #_sp_bat_right+0
   00CF D5            [11]  222 	push	de
   00D0 11 02 08      [10]  223 	ld	de, #0x0802
   00D3 D5            [11]  224 	push	de
   00D4 E5            [11]  225 	push	hl
   00D5 C5            [11]  226 	push	bc
   00D6 CDr00r00      [17]  227 	call	_cpct_drawSpriteMaskedAlignedTable
   00D9 C9            [10]  228 	ret
                            229 ;src/bat.c:81: BounceHits bat_bounce_ball(Ball * ball, i16 at_x, i16 at_y) 
                            230 ;	---------------------------------
                            231 ; Function bat_bounce_ball
                            232 ; ---------------------------------
   00DA                     233 _bat_bounce_ball::
   00DA DD E5         [15]  234 	push	ix
   00DC DD 21 00 00   [14]  235 	ld	ix,#0
   00E0 DD 39         [15]  236 	add	ix,sp
   00E2 F5            [11]  237 	push	af
   00E3 F5            [11]  238 	push	af
   00E4 3B            [ 6]  239 	dec	sp
                            240 ;src/bat.c:83: BounceHits bounces = BOUNCE_NONE;
   00E5 DD 36 FB 00   [19]  241 	ld	-5 (ix), #0x00
                            242 ;src/bat.c:87: if (ball->dy > 0 &&
   00E9 DD 4E 04      [19]  243 	ld	c,4 (ix)
   00EC DD 46 05      [19]  244 	ld	b,5 (ix)
   00EF 69            [ 4]  245 	ld	l, c
   00F0 60            [ 4]  246 	ld	h, b
   00F1 11 0B 00      [10]  247 	ld	de, #0x000b
   00F4 19            [11]  248 	add	hl, de
   00F5 5E            [ 7]  249 	ld	e, (hl)
   00F6 23            [ 6]  250 	inc	hl
   00F7 56            [ 7]  251 	ld	d, (hl)
   00F8 AF            [ 4]  252 	xor	a, a
   00F9 BB            [ 4]  253 	cp	a, e
   00FA 9A            [ 4]  254 	sbc	a, d
   00FB E2r00r01      [10]  255 	jp	PO, 00129$
   00FE EE 80         [ 7]  256 	xor	a, #0x80
   0100                     257 00129$:
   0100 F2r85r01      [10]  258 	jp	P, 00102$
                            259 ;src/bat.c:88: (ball->x + BALL_WIDTH > batX && ball->x < batX + batW) &&
   0103 69            [ 4]  260 	ld	l, c
   0104 60            [ 4]  261 	ld	h, b
   0105 23            [ 6]  262 	inc	hl
   0106 7E            [ 7]  263 	ld	a, (hl)
   0107 DD 77 FE      [19]  264 	ld	-2 (ix), a
   010A 23            [ 6]  265 	inc	hl
   010B 7E            [ 7]  266 	ld	a, (hl)
   010C DD 77 FF      [19]  267 	ld	-1 (ix), a
   010F DD 7E FE      [19]  268 	ld	a, -2 (ix)
   0112 C6 03         [ 7]  269 	add	a, #0x03
   0114 DD 77 FC      [19]  270 	ld	-4 (ix), a
   0117 DD 7E FF      [19]  271 	ld	a, -1 (ix)
   011A CE 00         [ 7]  272 	adc	a, #0x00
   011C DD 77 FD      [19]  273 	ld	-3 (ix), a
   011F 21r01r00      [10]  274 	ld	hl,#_batX + 0
   0122 5E            [ 7]  275 	ld	e, (hl)
   0123 16 00         [ 7]  276 	ld	d, #0x00
   0125 7B            [ 4]  277 	ld	a, e
   0126 DD 96 FC      [19]  278 	sub	a, -4 (ix)
   0129 7A            [ 4]  279 	ld	a, d
   012A DD 9E FD      [19]  280 	sbc	a, -3 (ix)
   012D E2r32r01      [10]  281 	jp	PO, 00130$
   0130 EE 80         [ 7]  282 	xor	a, #0x80
   0132                     283 00130$:
   0132 F2r85r01      [10]  284 	jp	P, 00102$
   0135 FD 21r03r00   [14]  285 	ld	iy, #_batW
   0139 FD 6E 00      [19]  286 	ld	l, 0 (iy)
   013C 26 00         [ 7]  287 	ld	h, #0x00
   013E 19            [11]  288 	add	hl, de
   013F DD 7E FE      [19]  289 	ld	a, -2 (ix)
   0142 95            [ 4]  290 	sub	a, l
   0143 DD 7E FF      [19]  291 	ld	a, -1 (ix)
   0146 9C            [ 4]  292 	sbc	a, h
   0147 E2r4Cr01      [10]  293 	jp	PO, 00131$
   014A EE 80         [ 7]  294 	xor	a, #0x80
   014C                     295 00131$:
   014C F2r85r01      [10]  296 	jp	P, 00102$
                            297 ;src/bat.c:89: (ball->y + BALL_HEIGHT > batY && ball->y < batY + SP_BAT_LEFT_H))
   014F 69            [ 4]  298 	ld	l, c
   0150 60            [ 4]  299 	ld	h, b
   0151 23            [ 6]  300 	inc	hl
   0152 23            [ 6]  301 	inc	hl
   0153 23            [ 6]  302 	inc	hl
   0154 4E            [ 7]  303 	ld	c, (hl)
   0155 23            [ 6]  304 	inc	hl
   0156 46            [ 7]  305 	ld	b, (hl)
   0157 21 06 00      [10]  306 	ld	hl, #0x0006
   015A 09            [11]  307 	add	hl,bc
   015B EB            [ 4]  308 	ex	de,hl
   015C FD 21r00r00   [14]  309 	ld	iy, #_batY
   0160 FD 6E 00      [19]  310 	ld	l, 0 (iy)
   0163 26 00         [ 7]  311 	ld	h, #0x00
   0165 7D            [ 4]  312 	ld	a, l
   0166 93            [ 4]  313 	sub	a, e
   0167 7C            [ 4]  314 	ld	a, h
   0168 9A            [ 4]  315 	sbc	a, d
   0169 E2r6Er01      [10]  316 	jp	PO, 00132$
   016C EE 80         [ 7]  317 	xor	a, #0x80
   016E                     318 00132$:
   016E F2r85r01      [10]  319 	jp	P, 00102$
   0171 11 08 00      [10]  320 	ld	de, #0x0008
   0174 19            [11]  321 	add	hl, de
   0175 79            [ 4]  322 	ld	a, c
   0176 95            [ 4]  323 	sub	a, l
   0177 78            [ 4]  324 	ld	a, b
   0178 9C            [ 4]  325 	sbc	a, h
   0179 E2r7Er01      [10]  326 	jp	PO, 00133$
   017C EE 80         [ 7]  327 	xor	a, #0x80
   017E                     328 00133$:
   017E F2r85r01      [10]  329 	jp	P, 00102$
                            330 ;src/bat.c:91: bounces |= BOUNCE_Y;        
   0181 DD 36 FB 02   [19]  331 	ld	-5 (ix), #0x02
   0185                     332 00102$:
                            333 ;src/bat.c:94: return bounces;
   0185 DD 6E FB      [19]  334 	ld	l, -5 (ix)
   0188 DD F9         [10]  335 	ld	sp, ix
   018A DD E1         [14]  336 	pop	ix
   018C C9            [10]  337 	ret
                            338 	.area _CODE
                            339 	.area _INITIALIZER
   0000                     340 __xinit__batY:
   0000 00                  341 	.db #0x00	; 0
   0001                     342 __xinit__batX:
   0001 00                  343 	.db #0x00	; 0
   0002                     344 __xinit__oldBatX:
   0002 00                  345 	.db #0x00	; 0
   0003                     346 __xinit__batW:
   0003 00                  347 	.db #0x00	; 0
                            348 	.area _CABS (ABS)
