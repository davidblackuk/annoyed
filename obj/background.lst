                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module background
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _cpct_etm_setTileset2x4
                             12 	.globl _cpct_etm_drawTileBox2x4
                             13 	.globl _cpct_etm_drawTilemap2x4_f
                             14 	.globl _cpct_getScreenPtr
                             15 	.globl _pvmem
                             16 	.globl _background_initialize
                             17 	.globl _background_restore_world_coords
                             18 	.globl _background_restore
                             19 ;--------------------------------------------------------
                             20 ; special function registers
                             21 ;--------------------------------------------------------
                             22 ;--------------------------------------------------------
                             23 ; ram data
                             24 ;--------------------------------------------------------
                             25 	.area _DATA
   0000                      26 _pvmem::
   0000                      27 	.ds 2
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _INITIALIZED
                             32 ;--------------------------------------------------------
                             33 ; absolute external ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DABS (ABS)
                             36 ;--------------------------------------------------------
                             37 ; global & static initialisations
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _GSINIT
                             41 	.area _GSFINAL
                             42 	.area _GSINIT
                             43 ;--------------------------------------------------------
                             44 ; Home
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _HOME
                             48 ;--------------------------------------------------------
                             49 ; code
                             50 ;--------------------------------------------------------
                             51 	.area _CODE
                             52 ;src/background.c:11: void background_initialize()
                             53 ;	---------------------------------
                             54 ; Function background_initialize
                             55 ; ---------------------------------
   0000                      56 _background_initialize::
                             57 ;src/background.c:16: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, TILE_MAP_SCREEN_BYTE_OFFSET_X, TILE_MAP_SCREEN_PIXEL_OFFSET_Y);
   0000 21 08 00      [10]   58 	ld	hl, #0x0008
   0003 E5            [11]   59 	push	hl
   0004 21 00 C0      [10]   60 	ld	hl, #0xc000
   0007 E5            [11]   61 	push	hl
   0008 CDr00r00      [17]   62 	call	_cpct_getScreenPtr
   000B 22r00r00      [16]   63 	ld	(_pvmem), hl
                             64 ;src/background.c:18: cpct_etm_setTileset2x4(g_tileset);
   000E 21r00r00      [10]   65 	ld	hl, #_g_tileset
   0011 CDr00r00      [17]   66 	call	_cpct_etm_setTileset2x4
                             67 ;src/background.c:21: cpct_etm_drawTilemap2x4_f(BACKGROUND_TILMAP_W, BACKGROUND_TILMAP_H, pvmem, current_level->background_tilemap);
   0014 2Ar00r00      [16]   68 	ld	hl, (_current_level)
   0017 4E            [ 7]   69 	ld	c, (hl)
   0018 23            [ 6]   70 	inc	hl
   0019 46            [ 7]   71 	ld	b, (hl)
   001A 2Ar00r00      [16]   72 	ld	hl, (_pvmem)
   001D C5            [11]   73 	push	bc
   001E E5            [11]   74 	push	hl
   001F 21 1E 32      [10]   75 	ld	hl, #0x321e
   0022 E5            [11]   76 	push	hl
   0023 CDr00r00      [17]   77 	call	_cpct_etm_drawTilemap2x4_f
   0026 C9            [10]   78 	ret
                             79 ;src/background.c:26: void background_restore_world_coords(u8 x, u8 y, u8 width, u8 height) {
                             80 ;	---------------------------------
                             81 ; Function background_restore_world_coords
                             82 ; ---------------------------------
   0027                      83 _background_restore_world_coords::
   0027 DD E5         [15]   84 	push	ix
   0029 DD 21 00 00   [14]   85 	ld	ix,#0
   002D DD 39         [15]   86 	add	ix,sp
   002F F5            [11]   87 	push	af
   0030 3B            [ 6]   88 	dec	sp
                             89 ;src/background.c:29: u8 tileX = 2 + (x / 2);
   0031 DD 7E 04      [19]   90 	ld	a, 4 (ix)
   0034 CB 3F         [ 8]   91 	srl	a
   0036 C6 02         [ 7]   92 	add	a, #0x02
   0038 DD 77 FD      [19]   93 	ld	-3 (ix), a
                             94 ;src/background.c:30: u8 tileY = 1 + (y / 4);
   003B DD 4E 05      [19]   95 	ld	c, 5 (ix)
   003E CB 39         [ 8]   96 	srl	c
   0040 CB 39         [ 8]   97 	srl	c
   0042 0C            [ 4]   98 	inc	c
                             99 ;src/background.c:31: u8 tileW = width / 2;
   0043 DD 46 06      [19]  100 	ld	b, 6 (ix)
   0046 CB 38         [ 8]  101 	srl	b
                            102 ;src/background.c:32: u8 tileH = height / 4;
   0048 DD 5E 07      [19]  103 	ld	e, 7 (ix)
   004B CB 3B         [ 8]  104 	srl	e
   004D CB 3B         [ 8]  105 	srl	e
                            106 ;src/background.c:34: if (height % 4 > 0)
   004F DD 7E 07      [19]  107 	ld	a, 7 (ix)
   0052 E6 03         [ 7]  108 	and	a, #0x03
   0054 28 01         [12]  109 	jr	Z,00102$
                            110 ;src/background.c:36: tileH++;
   0056 1C            [ 4]  111 	inc	e
   0057                     112 00102$:
                            113 ;src/background.c:39: if (width % 2 > 0)
   0057 DD CB 06 46   [20]  114 	bit	0, 6 (ix)
   005B 28 01         [12]  115 	jr	Z,00104$
                            116 ;src/background.c:41: tileW++;
   005D 04            [ 4]  117 	inc	b
   005E                     118 00104$:
                            119 ;src/background.c:44: if (x & 1 == 1)
   005E DD CB 04 46   [20]  120 	bit	0, 4 (ix)
   0062 28 01         [12]  121 	jr	Z,00106$
                            122 ;src/background.c:46: tileW += 1;
   0064 04            [ 4]  123 	inc	b
   0065                     124 00106$:
                            125 ;src/background.c:49: cpct_etm_drawTileBox2x4(tileX, tileY, tileW, tileH, BACKGROUND_TILMAP_W, pvmem, current_level->background_tilemap);
   0065 2Ar00r00      [16]  126 	ld	hl, (_current_level)
   0068 7E            [ 7]  127 	ld	a, (hl)
   0069 23            [ 6]  128 	inc	hl
   006A 66            [ 7]  129 	ld	h, (hl)
   006B DD 77 FE      [19]  130 	ld	-2 (ix), a
   006E DD 74 FF      [19]  131 	ld	-1 (ix), h
   0071 FD 2Ar00r00   [20]  132 	ld	iy, (_pvmem)
   0075 DD 6E FE      [19]  133 	ld	l,-2 (ix)
   0078 DD 66 FF      [19]  134 	ld	h,-1 (ix)
   007B E5            [11]  135 	push	hl
   007C FD E5         [15]  136 	push	iy
   007E 16 1E         [ 7]  137 	ld	d,#0x1e
   0080 D5            [11]  138 	push	de
   0081 C5            [11]  139 	push	bc
   0082 DD 7E FD      [19]  140 	ld	a, -3 (ix)
   0085 F5            [11]  141 	push	af
   0086 33            [ 6]  142 	inc	sp
   0087 CDr00r00      [17]  143 	call	_cpct_etm_drawTileBox2x4
   008A DD F9         [10]  144 	ld	sp, ix
   008C DD E1         [14]  145 	pop	ix
   008E C9            [10]  146 	ret
                            147 ;src/background.c:54: void background_restore(u8 screenX, u8 screenY, u8 bwidth, u8 pHeight)
                            148 ;	---------------------------------
                            149 ; Function background_restore
                            150 ; ---------------------------------
   008F                     151 _background_restore::
   008F DD E5         [15]  152 	push	ix
   0091 DD 21 00 00   [14]  153 	ld	ix,#0
   0095 DD 39         [15]  154 	add	ix,sp
   0097 F5            [11]  155 	push	af
   0098 F5            [11]  156 	push	af
                            157 ;src/background.c:58: u8 tileX = (screenX - TILE_MAP_SCREEN_BYTE_OFFSET_X) / 2;
   0099 DD 4E 04      [19]  158 	ld	c, 4 (ix)
   009C 06 00         [ 7]  159 	ld	b, #0x00
   009E 79            [ 4]  160 	ld	a, c
   009F C6 F8         [ 7]  161 	add	a, #0xf8
   00A1 5F            [ 4]  162 	ld	e, a
   00A2 78            [ 4]  163 	ld	a, b
   00A3 CE FF         [ 7]  164 	adc	a, #0xff
   00A5 57            [ 4]  165 	ld	d, a
   00A6 6B            [ 4]  166 	ld	l, e
   00A7 62            [ 4]  167 	ld	h, d
   00A8 CB 7A         [ 8]  168 	bit	7, d
   00AA 28 04         [12]  169 	jr	Z,00109$
   00AC 21 F9 FF      [10]  170 	ld	hl, #0xfff9
   00AF 09            [11]  171 	add	hl, bc
   00B0                     172 00109$:
   00B0 CB 2C         [ 8]  173 	sra	h
   00B2 CB 1D         [ 8]  174 	rr	l
   00B4 DD 75 FD      [19]  175 	ld	-3 (ix), l
                            176 ;src/background.c:59: u8 tileY = (screenY - TILE_MAP_SCREEN_PIXEL_OFFSET_Y) / 4;
   00B7 DD 4E 05      [19]  177 	ld	c, 5 (ix)
   00BA 06 00         [ 7]  178 	ld	b, #0x00
   00BC 59            [ 4]  179 	ld	e, c
   00BD 68            [ 4]  180 	ld	l, b
   00BE CB 78         [ 8]  181 	bit	7, b
   00C0 28 05         [12]  182 	jr	Z,00110$
   00C2 03            [ 6]  183 	inc	bc
   00C3 03            [ 6]  184 	inc	bc
   00C4 03            [ 6]  185 	inc	bc
   00C5 59            [ 4]  186 	ld	e, c
   00C6 68            [ 4]  187 	ld	l, b
   00C7                     188 00110$:
   00C7 CB 2D         [ 8]  189 	sra	l
   00C9 CB 1B         [ 8]  190 	rr	e
   00CB CB 2D         [ 8]  191 	sra	l
   00CD CB 1B         [ 8]  192 	rr	e
   00CF DD 73 FC      [19]  193 	ld	-4 (ix), e
                            194 ;src/background.c:60: u8 tileW = bwidth / 2;
   00D2 DD 5E 06      [19]  195 	ld	e, 6 (ix)
   00D5 CB 3B         [ 8]  196 	srl	e
                            197 ;src/background.c:61: u8 tileH = pHeight / 4;
   00D7 DD 56 07      [19]  198 	ld	d, 7 (ix)
   00DA CB 3A         [ 8]  199 	srl	d
   00DC CB 3A         [ 8]  200 	srl	d
                            201 ;src/background.c:63: if (pHeight % 4 > 0)
   00DE DD 7E 07      [19]  202 	ld	a, 7 (ix)
   00E1 E6 03         [ 7]  203 	and	a, #0x03
   00E3 28 01         [12]  204 	jr	Z,00102$
                            205 ;src/background.c:65: tileH++;
   00E5 14            [ 4]  206 	inc	d
   00E6                     207 00102$:
                            208 ;src/background.c:68: if (bwidth % 2 > 0)
   00E6 DD CB 06 46   [20]  209 	bit	0, 6 (ix)
   00EA 28 01         [12]  210 	jr	Z,00104$
                            211 ;src/background.c:70: tileW++;
   00EC 1C            [ 4]  212 	inc	e
   00ED                     213 00104$:
                            214 ;src/background.c:73: if (screenX & 1 == 1)
   00ED DD CB 04 46   [20]  215 	bit	0, 4 (ix)
   00F1 28 01         [12]  216 	jr	Z,00106$
                            217 ;src/background.c:75: tileW += 1;
   00F3 1C            [ 4]  218 	inc	e
   00F4                     219 00106$:
                            220 ;src/background.c:78: cpct_etm_drawTileBox2x4(tileX, tileY, tileW, tileH, BACKGROUND_TILMAP_W, pvmem, current_level->background_tilemap);
   00F4 2Ar00r00      [16]  221 	ld	hl, (_current_level)
   00F7 4E            [ 7]  222 	ld	c, (hl)
   00F8 23            [ 6]  223 	inc	hl
   00F9 46            [ 7]  224 	ld	b, (hl)
   00FA DD 71 FE      [19]  225 	ld	-2 (ix), c
   00FD DD 70 FF      [19]  226 	ld	-1 (ix), b
   0100 2Ar00r00      [16]  227 	ld	hl, (_pvmem)
   0103 DD 4E FE      [19]  228 	ld	c,-2 (ix)
   0106 DD 46 FF      [19]  229 	ld	b,-1 (ix)
   0109 C5            [11]  230 	push	bc
   010A E5            [11]  231 	push	hl
   010B 3E 1E         [ 7]  232 	ld	a, #0x1e
   010D F5            [11]  233 	push	af
   010E 33            [ 6]  234 	inc	sp
   010F D5            [11]  235 	push	de
   0110 33            [ 6]  236 	inc	sp
   0111 53            [ 4]  237 	ld	d, e
   0112 DD 5E FC      [19]  238 	ld	e, -4 (ix)
   0115 D5            [11]  239 	push	de
   0116 DD 7E FD      [19]  240 	ld	a, -3 (ix)
   0119 F5            [11]  241 	push	af
   011A 33            [ 6]  242 	inc	sp
   011B CDr00r00      [17]  243 	call	_cpct_etm_drawTileBox2x4
   011E DD F9         [10]  244 	ld	sp, ix
   0120 DD E1         [14]  245 	pop	ix
   0122 C9            [10]  246 	ret
                            247 	.area _CODE
                            248 	.area _INITIALIZER
                            249 	.area _CABS (ABS)
