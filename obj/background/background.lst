                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module background
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _restoreBackground
                             12 	.globl _initializeBackground
                             13 	.globl _drawNumber
                             14 	.globl _cpct_etm_setTileset2x4
                             15 	.globl _cpct_etm_drawTileBox2x4
                             16 	.globl _cpct_etm_drawTilemap2x4_f
                             17 	.globl _cpct_getScreenPtr
                             18 	.globl _cpct_drawCharM0
                             19 	.globl _cpct_setDrawCharM0
                             20 	.globl _pvmem
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
   0000                      28 _pvmem::
   0000                      29 	.ds 2
                             30 ;--------------------------------------------------------
                             31 ; ram data
                             32 ;--------------------------------------------------------
                             33 	.area _INITIALIZED
                             34 ;--------------------------------------------------------
                             35 ; absolute external ram data
                             36 ;--------------------------------------------------------
                             37 	.area _DABS (ABS)
                             38 ;--------------------------------------------------------
                             39 ; global & static initialisations
                             40 ;--------------------------------------------------------
                             41 	.area _HOME
                             42 	.area _GSINIT
                             43 	.area _GSFINAL
                             44 	.area _GSINIT
                             45 ;--------------------------------------------------------
                             46 ; Home
                             47 ;--------------------------------------------------------
                             48 	.area _HOME
                             49 	.area _HOME
                             50 ;--------------------------------------------------------
                             51 ; code
                             52 ;--------------------------------------------------------
                             53 	.area _CODE
                             54 ;src/background/background.c:12: void drawNumber(u8 num) {
                             55 ;	---------------------------------
                             56 ; Function drawNumber
                             57 ; ---------------------------------
   0000                      58 _drawNumber::
   0000 DD E5         [15]   59 	push	ix
   0002 DD 21 00 00   [14]   60 	ld	ix,#0
   0006 DD 39         [15]   61 	add	ix,sp
                             62 ;src/background/background.c:14: cpct_setDrawCharM0(5, 0);
   0008 21 05 00      [10]   63 	ld	hl, #0x0005
   000B E5            [11]   64 	push	hl
   000C CDr00r00      [17]   65 	call	_cpct_setDrawCharM0
                             66 ;src/background/background.c:16: for(i=0; i<5; i++) {
   000F 0E 00         [ 7]   67 	ld	c, #0x00
   0011                      68 00102$:
                             69 ;src/background/background.c:17: u8 digit = '0' + (num % 10);
   0011 C5            [11]   70 	push	bc
   0012 3E 0A         [ 7]   71 	ld	a, #0x0a
   0014 F5            [11]   72 	push	af
   0015 33            [ 6]   73 	inc	sp
   0016 DD 7E 04      [19]   74 	ld	a, 4 (ix)
   0019 F5            [11]   75 	push	af
   001A 33            [ 6]   76 	inc	sp
   001B CDr00r00      [17]   77 	call	__moduchar
   001E F1            [10]   78 	pop	af
   001F C1            [10]   79 	pop	bc
   0020 7D            [ 4]   80 	ld	a, l
   0021 C6 30         [ 7]   81 	add	a, #0x30
   0023 5F            [ 4]   82 	ld	e, a
                             83 ;src/background/background.c:18: cpct_drawCharM0((void*)(LASTDIGIT_VMEM - 4*i), digit);
   0024 16 00         [ 7]   84 	ld	d, #0x00
   0026 69            [ 4]   85 	ld	l, c
   0027 26 00         [ 7]   86 	ld	h, #0x00
   0029 29            [11]   87 	add	hl, hl
   002A 29            [11]   88 	add	hl, hl
   002B 3E 4B         [ 7]   89 	ld	a, #0x4b
   002D 95            [ 4]   90 	sub	a, l
   002E 6F            [ 4]   91 	ld	l, a
   002F 3E C0         [ 7]   92 	ld	a, #0xc0
   0031 9C            [ 4]   93 	sbc	a, h
   0032 67            [ 4]   94 	ld	h, a
   0033 C5            [11]   95 	push	bc
   0034 D5            [11]   96 	push	de
   0035 E5            [11]   97 	push	hl
   0036 CDr00r00      [17]   98 	call	_cpct_drawCharM0
   0039 3E 0A         [ 7]   99 	ld	a, #0x0a
   003B F5            [11]  100 	push	af
   003C 33            [ 6]  101 	inc	sp
   003D DD 7E 04      [19]  102 	ld	a, 4 (ix)
   0040 F5            [11]  103 	push	af
   0041 33            [ 6]  104 	inc	sp
   0042 CDr00r00      [17]  105 	call	__divuchar
   0045 F1            [10]  106 	pop	af
   0046 C1            [10]  107 	pop	bc
   0047 DD 75 04      [19]  108 	ld	4 (ix), l
                            109 ;src/background/background.c:16: for(i=0; i<5; i++) {
   004A 0C            [ 4]  110 	inc	c
   004B 79            [ 4]  111 	ld	a, c
   004C D6 05         [ 7]  112 	sub	a, #0x05
   004E 38 C1         [12]  113 	jr	C,00102$
   0050 DD E1         [14]  114 	pop	ix
   0052 C9            [10]  115 	ret
                            116 ;src/background/background.c:23: void initializeBackground()
                            117 ;	---------------------------------
                            118 ; Function initializeBackground
                            119 ; ---------------------------------
   0053                     120 _initializeBackground::
                            121 ;src/background/background.c:26: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, TILE_MAP_SCREEN_BYTE_OFFSET_X, TILE_MAP_SCREEN_PIXEL_OFFSET_y);
   0053 21 08 10      [10]  122 	ld	hl, #0x1008
   0056 E5            [11]  123 	push	hl
   0057 21 00 C0      [10]  124 	ld	hl, #0xc000
   005A E5            [11]  125 	push	hl
   005B CDr00r00      [17]  126 	call	_cpct_getScreenPtr
   005E 22r00r00      [16]  127 	ld	(_pvmem), hl
                            128 ;src/background/background.c:28: cpct_etm_setTileset2x4(g_tileset);
   0061 21r00r00      [10]  129 	ld	hl, #_g_tileset
   0064 CDr00r00      [17]  130 	call	_cpct_etm_setTileset2x4
                            131 ;src/background/background.c:31: cpct_etm_drawTilemap2x4_f(g_tilemap_l00_W, g_tilemap_l00_H, pvmem, g_tilemap_l00);
   0067 01r00r00      [10]  132 	ld	bc, #_g_tilemap_l00+0
   006A 2Ar00r00      [16]  133 	ld	hl, (_pvmem)
   006D C5            [11]  134 	push	bc
   006E E5            [11]  135 	push	hl
   006F 21 1F 2E      [10]  136 	ld	hl, #0x2e1f
   0072 E5            [11]  137 	push	hl
   0073 CDr00r00      [17]  138 	call	_cpct_etm_drawTilemap2x4_f
   0076 C9            [10]  139 	ret
                            140 ;src/background/background.c:37: void restoreBackground(u8 screenX, u8 screenY, u8 bwidth, u8 pHeight)
                            141 ;	---------------------------------
                            142 ; Function restoreBackground
                            143 ; ---------------------------------
   0077                     144 _restoreBackground::
   0077 DD E5         [15]  145 	push	ix
   0079 DD 21 00 00   [14]  146 	ld	ix,#0
   007D DD 39         [15]  147 	add	ix,sp
   007F F5            [11]  148 	push	af
                            149 ;src/background/background.c:39: u8 tileX = (screenX - TILE_MAP_SCREEN_BYTE_OFFSET_X) / 2;
   0080 DD 4E 04      [19]  150 	ld	c, 4 (ix)
   0083 06 00         [ 7]  151 	ld	b, #0x00
   0085 79            [ 4]  152 	ld	a, c
   0086 C6 F8         [ 7]  153 	add	a, #0xf8
   0088 5F            [ 4]  154 	ld	e, a
   0089 78            [ 4]  155 	ld	a, b
   008A CE FF         [ 7]  156 	adc	a, #0xff
   008C 57            [ 4]  157 	ld	d, a
   008D 6B            [ 4]  158 	ld	l, e
   008E 62            [ 4]  159 	ld	h, d
   008F CB 7A         [ 8]  160 	bit	7, d
   0091 28 04         [12]  161 	jr	Z,00103$
   0093 21 F9 FF      [10]  162 	ld	hl, #0xfff9
   0096 09            [11]  163 	add	hl, bc
   0097                     164 00103$:
   0097 CB 2C         [ 8]  165 	sra	h
   0099 CB 1D         [ 8]  166 	rr	l
   009B 45            [ 4]  167 	ld	b, l
                            168 ;src/background/background.c:40: u8 tileY = (screenY - TILE_MAP_SCREEN_PIXEL_OFFSET_y) / 4; 
   009C DD 5E 05      [19]  169 	ld	e, 5 (ix)
   009F 16 00         [ 7]  170 	ld	d, #0x00
   00A1 7B            [ 4]  171 	ld	a, e
   00A2 C6 F0         [ 7]  172 	add	a, #0xf0
   00A4 DD 77 FE      [19]  173 	ld	-2 (ix), a
   00A7 7A            [ 4]  174 	ld	a, d
   00A8 CE FF         [ 7]  175 	adc	a, #0xff
   00AA DD 77 FF      [19]  176 	ld	-1 (ix), a
   00AD E1            [10]  177 	pop	hl
   00AE E5            [11]  178 	push	hl
   00AF DD CB FF 7E   [20]  179 	bit	7, -1 (ix)
   00B3 28 04         [12]  180 	jr	Z,00104$
   00B5 21 F3 FF      [10]  181 	ld	hl, #0xfff3
   00B8 19            [11]  182 	add	hl, de
   00B9                     183 00104$:
   00B9 CB 2C         [ 8]  184 	sra	h
   00BB CB 1D         [ 8]  185 	rr	l
   00BD CB 2C         [ 8]  186 	sra	h
   00BF CB 1D         [ 8]  187 	rr	l
   00C1 4D            [ 4]  188 	ld	c, l
                            189 ;src/background/background.c:41: cpct_etm_drawTileBox2x4(tileX, tileY, bwidth / 2, pHeight / 4, g_tilemap_l00_W, pvmem, g_tilemap_l00);
   00C2 2Ar00r00      [16]  190 	ld	hl, (_pvmem)
   00C5 E3            [19]  191 	ex	(sp), hl
   00C6 DD 5E 07      [19]  192 	ld	e, 7 (ix)
   00C9 CB 3B         [ 8]  193 	srl	e
   00CB CB 3B         [ 8]  194 	srl	e
   00CD DD 56 06      [19]  195 	ld	d, 6 (ix)
   00D0 CB 3A         [ 8]  196 	srl	d
   00D2 C5            [11]  197 	push	bc
   00D3 21r00r00      [10]  198 	ld	hl, #_g_tilemap_l00
   00D6 E5            [11]  199 	push	hl
   00D7 DD 6E FE      [19]  200 	ld	l,-2 (ix)
   00DA DD 66 FF      [19]  201 	ld	h,-1 (ix)
   00DD E5            [11]  202 	push	hl
   00DE 3E 1F         [ 7]  203 	ld	a, #0x1f
   00E0 F5            [11]  204 	push	af
   00E1 33            [ 6]  205 	inc	sp
   00E2 7B            [ 4]  206 	ld	a, e
   00E3 F5            [11]  207 	push	af
   00E4 33            [ 6]  208 	inc	sp
   00E5 59            [ 4]  209 	ld	e, c
   00E6 D5            [11]  210 	push	de
   00E7 C5            [11]  211 	push	bc
   00E8 33            [ 6]  212 	inc	sp
   00E9 CDr00r00      [17]  213 	call	_cpct_etm_drawTileBox2x4
   00EC 33            [ 6]  214 	inc	sp
   00ED CDr00r00      [17]  215 	call	_drawNumber
   00F0 DD F9         [10]  216 	ld	sp,ix
   00F2 DD E1         [14]  217 	pop	ix
   00F4 C9            [10]  218 	ret
                            219 	.area _CODE
                            220 	.area _INITIALIZER
                            221 	.area _CABS (ABS)
