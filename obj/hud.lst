                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module hud
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _cpct_getScreenPtr
                             12 	.globl _cpct_drawSprite
                             13 	.globl _digits
                             14 	.globl _hud_initialize
                             15 	.globl _hud_continue_from_death
                             16 	.globl _hud_update
                             17 	.globl _hud_restore_background
                             18 	.globl _hud_draw
                             19 	.globl _hud_initialize_internal
                             20 	.globl _hud_initialize_static_text
                             21 	.globl _hud_draw_score_with_added_last_zero
                             22 	.globl _hud_draw_lives
                             23 ;--------------------------------------------------------
                             24 ; special function registers
                             25 ;--------------------------------------------------------
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area _DATA
   0000                      30 _digits::
   0000                      31 	.ds 20
                             32 ;--------------------------------------------------------
                             33 ; ram data
                             34 ;--------------------------------------------------------
                             35 	.area _INITIALIZED
                             36 ;--------------------------------------------------------
                             37 ; absolute external ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DABS (ABS)
                             40 ;--------------------------------------------------------
                             41 ; global & static initialisations
                             42 ;--------------------------------------------------------
                             43 	.area _HOME
                             44 	.area _GSINIT
                             45 	.area _GSFINAL
                             46 	.area _GSINIT
                             47 ;--------------------------------------------------------
                             48 ; Home
                             49 ;--------------------------------------------------------
                             50 	.area _HOME
                             51 	.area _HOME
                             52 ;--------------------------------------------------------
                             53 ; code
                             54 ;--------------------------------------------------------
                             55 	.area _CODE
                             56 ;src/hud.c:32: void hud_initialize()
                             57 ;	---------------------------------
                             58 ; Function hud_initialize
                             59 ; ---------------------------------
   0000                      60 _hud_initialize::
                             61 ;src/hud.c:34: digits[0] = sp_font_00; 
   0000 21r00r00      [10]   62 	ld	hl, #_sp_font_00
   0003 22r00r00      [16]   63 	ld	(_digits), hl
                             64 ;src/hud.c:35: digits[1] = sp_font_01; 
   0006 21r00r00      [10]   65 	ld	hl, #_sp_font_01
   0009 22r02r00      [16]   66 	ld	((_digits + 0x0002)), hl
                             67 ;src/hud.c:36: digits[2] = sp_font_02; 
   000C 21r00r00      [10]   68 	ld	hl, #_sp_font_02
   000F 22r04r00      [16]   69 	ld	((_digits + 0x0004)), hl
                             70 ;src/hud.c:37: digits[3] = sp_font_03; 
   0012 21r00r00      [10]   71 	ld	hl, #_sp_font_03
   0015 22r06r00      [16]   72 	ld	((_digits + 0x0006)), hl
                             73 ;src/hud.c:38: digits[4] = sp_font_04; 
   0018 21r00r00      [10]   74 	ld	hl, #_sp_font_04
   001B 22r08r00      [16]   75 	ld	((_digits + 0x0008)), hl
                             76 ;src/hud.c:39: digits[5] = sp_font_05; 
   001E 21r00r00      [10]   77 	ld	hl, #_sp_font_05
   0021 22r0Ar00      [16]   78 	ld	((_digits + 0x000a)), hl
                             79 ;src/hud.c:40: digits[6] = sp_font_06; 
   0024 21r00r00      [10]   80 	ld	hl, #_sp_font_06
   0027 22r0Cr00      [16]   81 	ld	((_digits + 0x000c)), hl
                             82 ;src/hud.c:41: digits[7] = sp_font_07; 
   002A 21r00r00      [10]   83 	ld	hl, #_sp_font_07
   002D 22r0Er00      [16]   84 	ld	((_digits + 0x000e)), hl
                             85 ;src/hud.c:42: digits[8] = sp_font_08; 
   0030 21r00r00      [10]   86 	ld	hl, #_sp_font_08
   0033 22r10r00      [16]   87 	ld	((_digits + 0x0010)), hl
                             88 ;src/hud.c:43: digits[9] = sp_font_09; 
   0036 21r00r00      [10]   89 	ld	hl, #_sp_font_09
   0039 22r12r00      [16]   90 	ld	((_digits + 0x0012)), hl
                             91 ;src/hud.c:45: hud_initialize_internal(FALSE);
   003C AF            [ 4]   92 	xor	a, a
   003D F5            [11]   93 	push	af
   003E 33            [ 6]   94 	inc	sp
   003F CDr50r00      [17]   95 	call	_hud_initialize_internal
   0042 33            [ 6]   96 	inc	sp
   0043 C9            [10]   97 	ret
                             98 ;src/hud.c:48: void hud_continue_from_death()
                             99 ;	---------------------------------
                            100 ; Function hud_continue_from_death
                            101 ; ---------------------------------
   0044                     102 _hud_continue_from_death::
                            103 ;src/hud.c:50: hud_initialize_internal(TRUE);
   0044 3E 01         [ 7]  104 	ld	a, #0x01
   0046 F5            [11]  105 	push	af
   0047 33            [ 6]  106 	inc	sp
   0048 CDr50r00      [17]  107 	call	_hud_initialize_internal
   004B 33            [ 6]  108 	inc	sp
   004C C9            [10]  109 	ret
                            110 ;src/hud.c:53: void hud_update()
                            111 ;	---------------------------------
                            112 ; Function hud_update
                            113 ; ---------------------------------
   004D                     114 _hud_update::
                            115 ;src/hud.c:55: }
   004D C9            [10]  116 	ret
                            117 ;src/hud.c:57: void hud_restore_background()
                            118 ;	---------------------------------
                            119 ; Function hud_restore_background
                            120 ; ---------------------------------
   004E                     121 _hud_restore_background::
                            122 ;src/hud.c:59: }
   004E C9            [10]  123 	ret
                            124 ;src/hud.c:61: void hud_draw()
                            125 ;	---------------------------------
                            126 ; Function hud_draw
                            127 ; ---------------------------------
   004F                     128 _hud_draw::
                            129 ;src/hud.c:63: }
   004F C9            [10]  130 	ret
                            131 ;src/hud.c:69: void hud_initialize_internal(u8 is_restart)
                            132 ;	---------------------------------
                            133 ; Function hud_initialize_internal
                            134 ; ---------------------------------
   0050                     135 _hud_initialize_internal::
   0050 DD E5         [15]  136 	push	ix
   0052 DD 21 00 00   [14]  137 	ld	ix,#0
   0056 DD 39         [15]  138 	add	ix,sp
   0058 F5            [11]  139 	push	af
                            140 ;src/hud.c:71: u8 initial_y = SCREEN_HEIGHT_ROWS - (((lives_left - 1) / 2) * 8) - 8;
   0059 21r00r00      [10]  141 	ld	hl,#_lives_left + 0
   005C 5E            [ 7]  142 	ld	e, (hl)
   005D 16 00         [ 7]  143 	ld	d, #0x00
   005F 6B            [ 4]  144 	ld	l, e
   0060 62            [ 4]  145 	ld	h, d
   0061 2B            [ 6]  146 	dec	hl
   0062 4D            [ 4]  147 	ld	c, l
   0063 44            [ 4]  148 	ld	b, h
   0064 CB 7C         [ 8]  149 	bit	7, h
   0066 28 02         [12]  150 	jr	Z,00107$
   0068 4B            [ 4]  151 	ld	c, e
   0069 42            [ 4]  152 	ld	b, d
   006A                     153 00107$:
   006A CB 28         [ 8]  154 	sra	b
   006C CB 19         [ 8]  155 	rr	c
   006E 79            [ 4]  156 	ld	a, c
   006F 07            [ 4]  157 	rlca
   0070 07            [ 4]  158 	rlca
   0071 07            [ 4]  159 	rlca
   0072 E6 F8         [ 7]  160 	and	a, #0xf8
   0074 4F            [ 4]  161 	ld	c, a
   0075 3E C0         [ 7]  162 	ld	a, #0xc0
   0077 91            [ 4]  163 	sub	a, c
   0078 DD 77 FE      [19]  164 	ld	-2 (ix), a
                            165 ;src/hud.c:73: hud_initialize_static_text();
   007B CDrD9r00      [17]  166 	call	_hud_initialize_static_text
                            167 ;src/hud.c:74: hud_draw_score_with_added_last_zero(current_score, HUD_TOP + HUD_TEXT_SPACING);
   007E 3E 0B         [ 7]  168 	ld	a, #0x0b
   0080 F5            [11]  169 	push	af
   0081 33            [ 6]  170 	inc	sp
   0082 2Ar00r00      [16]  171 	ld	hl, (_current_score)
   0085 E5            [11]  172 	push	hl
   0086 CDr40r01      [17]  173 	call	_hud_draw_score_with_added_last_zero
   0089 F1            [10]  174 	pop	af
   008A 33            [ 6]  175 	inc	sp
                            176 ;src/hud.c:76: hud_draw_score_with_added_last_zero(high_score, HUD_TOP + (HUD_TEXT_SPACING * 5) );
   008B 3E 33         [ 7]  177 	ld	a, #0x33
   008D F5            [11]  178 	push	af
   008E 33            [ 6]  179 	inc	sp
   008F 2Ar00r00      [16]  180 	ld	hl, (_high_score)
   0092 E5            [11]  181 	push	hl
   0093 CDr40r01      [17]  182 	call	_hud_draw_score_with_added_last_zero
   0096 F1            [10]  183 	pop	af
   0097 33            [ 6]  184 	inc	sp
                            185 ;src/hud.c:79: for (u8 i = 0; i < lives_left; i++)
   0098 0E 00         [ 7]  186 	ld	c, #0x00
   009A                     187 00103$:
   009A 21r00r00      [10]  188 	ld	hl, #_lives_left
   009D 79            [ 4]  189 	ld	a, c
   009E 96            [ 7]  190 	sub	a, (hl)
   009F 30 33         [12]  191 	jr	NC,00105$
                            192 ;src/hud.c:81: u8 x = ((i & 1) == 0) ? HUD_LEFT : HUD_LEFT + (SP_LIFE_W + 1);
   00A1 CB 41         [ 8]  193 	bit	0, c
   00A3 20 04         [12]  194 	jr	NZ,00108$
   00A5 06 44         [ 7]  195 	ld	b, #0x44
   00A7 18 02         [12]  196 	jr	00109$
   00A9                     197 00108$:
   00A9 06 4A         [ 7]  198 	ld	b, #0x4a
   00AB                     199 00109$:
                            200 ;src/hud.c:82: u8 y = initial_y + ((i / 2) * 8);
   00AB 79            [ 4]  201 	ld	a, c
   00AC CB 3F         [ 8]  202 	srl	a
   00AE 07            [ 4]  203 	rlca
   00AF 07            [ 4]  204 	rlca
   00B0 07            [ 4]  205 	rlca
   00B1 E6 F8         [ 7]  206 	and	a, #0xf8
   00B3 5F            [ 4]  207 	ld	e, a
   00B4 DD 7E FE      [19]  208 	ld	a, -2 (ix)
   00B7 83            [ 4]  209 	add	a, e
                            210 ;src/hud.c:84: u8 *pvmem = cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   00B8 C5            [11]  211 	push	bc
   00B9 F5            [11]  212 	push	af
   00BA 33            [ 6]  213 	inc	sp
   00BB C5            [11]  214 	push	bc
   00BC 33            [ 6]  215 	inc	sp
   00BD 21 00 C0      [10]  216 	ld	hl, #0xc000
   00C0 E5            [11]  217 	push	hl
   00C1 CDr00r00      [17]  218 	call	_cpct_getScreenPtr
   00C4 11 05 06      [10]  219 	ld	de, #0x0605
   00C7 D5            [11]  220 	push	de
   00C8 E5            [11]  221 	push	hl
   00C9 21r00r00      [10]  222 	ld	hl, #_sp_life
   00CC E5            [11]  223 	push	hl
   00CD CDr00r00      [17]  224 	call	_cpct_drawSprite
   00D0 C1            [10]  225 	pop	bc
                            226 ;src/hud.c:79: for (u8 i = 0; i < lives_left; i++)
   00D1 0C            [ 4]  227 	inc	c
   00D2 18 C6         [12]  228 	jr	00103$
   00D4                     229 00105$:
   00D4 DD F9         [10]  230 	ld	sp, ix
   00D6 DD E1         [14]  231 	pop	ix
   00D8 C9            [10]  232 	ret
                            233 ;src/hud.c:89: void hud_initialize_static_text()
                            234 ;	---------------------------------
                            235 ; Function hud_initialize_static_text
                            236 ; ---------------------------------
   00D9                     237 _hud_initialize_static_text::
                            238 ;src/hud.c:92: u8 *svmem = cpct_getScreenPtr(CPCT_VMEM_START, HUD_LEFT + 1, 1);
   00D9 21 45 01      [10]  239 	ld	hl, #0x0145
   00DC E5            [11]  240 	push	hl
   00DD 21 00 C0      [10]  241 	ld	hl, #0xc000
   00E0 E5            [11]  242 	push	hl
   00E1 CDr00r00      [17]  243 	call	_cpct_getScreenPtr
   00E4 4D            [ 4]  244 	ld	c, l
   00E5 44            [ 4]  245 	ld	b, h
                            246 ;src/hud.c:93: cpct_drawSprite(sp_score, svmem, SP_SCORE_W, SP_SCORE_H);
   00E6 21 0A 07      [10]  247 	ld	hl, #0x070a
   00E9 E5            [11]  248 	push	hl
   00EA C5            [11]  249 	push	bc
   00EB 21r00r00      [10]  250 	ld	hl, #_sp_score
   00EE E5            [11]  251 	push	hl
   00EF CDr00r00      [17]  252 	call	_cpct_drawSprite
                            253 ;src/hud.c:96: svmem = cpct_getScreenPtr(CPCT_VMEM_START, HUD_LEFT + 2, 1 + (3 * HUD_TEXT_SPACING));
   00F2 21 46 1F      [10]  254 	ld	hl, #0x1f46
   00F5 E5            [11]  255 	push	hl
   00F6 21 00 C0      [10]  256 	ld	hl, #0xc000
   00F9 E5            [11]  257 	push	hl
   00FA CDr00r00      [17]  258 	call	_cpct_getScreenPtr
                            259 ;src/hud.c:97: cpct_drawSprite(sp_high, svmem, SP_HIGH_W, SP_HIGH_H);
   00FD 01r00r00      [10]  260 	ld	bc, #_sp_high+0
   0100 11 08 07      [10]  261 	ld	de, #0x0708
   0103 D5            [11]  262 	push	de
   0104 E5            [11]  263 	push	hl
   0105 C5            [11]  264 	push	bc
   0106 CDr00r00      [17]  265 	call	_cpct_drawSprite
                            266 ;src/hud.c:100: svmem = cpct_getScreenPtr(CPCT_VMEM_START, HUD_LEFT + 1, 1 + (4 * HUD_TEXT_SPACING));
   0109 21 45 29      [10]  267 	ld	hl, #0x2945
   010C E5            [11]  268 	push	hl
   010D 21 00 C0      [10]  269 	ld	hl, #0xc000
   0110 E5            [11]  270 	push	hl
   0111 CDr00r00      [17]  271 	call	_cpct_getScreenPtr
                            272 ;src/hud.c:101: cpct_drawSprite(sp_score, svmem, SP_SCORE_W, SP_SCORE_H);
   0114 01 0A 07      [10]  273 	ld	bc, #0x070a
   0117 C5            [11]  274 	push	bc
   0118 E5            [11]  275 	push	hl
   0119 21r00r00      [10]  276 	ld	hl, #_sp_score
   011C E5            [11]  277 	push	hl
   011D CDr00r00      [17]  278 	call	_cpct_drawSprite
                            279 ;src/hud.c:104: svmem = cpct_getScreenPtr(CPCT_VMEM_START, HUD_LEFT + 1, 1 + (7 * HUD_TEXT_SPACING));
   0120 21 45 47      [10]  280 	ld	hl, #0x4745
   0123 E5            [11]  281 	push	hl
   0124 21 00 C0      [10]  282 	ld	hl, #0xc000
   0127 E5            [11]  283 	push	hl
   0128 CDr00r00      [17]  284 	call	_cpct_getScreenPtr
                            285 ;src/hud.c:105: cpct_drawSprite(sp_level, svmem, SP_LEVEL_W, SP_LEVEL_H);
   012B 01r00r00      [10]  286 	ld	bc, #_sp_level+0
   012E 11 0A 07      [10]  287 	ld	de, #0x070a
   0131 D5            [11]  288 	push	de
   0132 E5            [11]  289 	push	hl
   0133 C5            [11]  290 	push	bc
   0134 CDr00r00      [17]  291 	call	_cpct_drawSprite
                            292 ;src/hud.c:107: hud_draw_lives(1 + (8 * HUD_TEXT_SPACING));
   0137 3E 51         [ 7]  293 	ld	a, #0x51
   0139 F5            [11]  294 	push	af
   013A 33            [ 6]  295 	inc	sp
   013B CDrC7r01      [17]  296 	call	_hud_draw_lives
   013E 33            [ 6]  297 	inc	sp
   013F C9            [10]  298 	ret
                            299 ;src/hud.c:113: void hud_draw_score_with_added_last_zero(u16 score, u8 row)
                            300 ;	---------------------------------
                            301 ; Function hud_draw_score_with_added_last_zero
                            302 ; ---------------------------------
   0140                     303 _hud_draw_score_with_added_last_zero::
   0140 DD E5         [15]  304 	push	ix
   0142 DD 21 00 00   [14]  305 	ld	ix,#0
   0146 DD 39         [15]  306 	add	ix,sp
   0148 F5            [11]  307 	push	af
   0149 3B            [ 6]  308 	dec	sp
                            309 ;src/hud.c:116: u8 *svmem = cpct_getScreenPtr(CPCT_VMEM_START, 80 - 2, row);
   014A DD 56 06      [19]  310 	ld	d, 6 (ix)
   014D 1E 4E         [ 7]  311 	ld	e,#0x4e
   014F D5            [11]  312 	push	de
   0150 21 00 C0      [10]  313 	ld	hl, #0xc000
   0153 E5            [11]  314 	push	hl
   0154 CDr00r00      [17]  315 	call	_cpct_getScreenPtr
   0157 33            [ 6]  316 	inc	sp
   0158 33            [ 6]  317 	inc	sp
                            318 ;src/hud.c:121: cpct_drawSprite(sp_font_00, svmem, SP_FONT_CHAR_W, SP_FONT_CHAR_H);
   0159 4D            [ 4]  319 	ld	c, l
   015A 44            [ 4]  320 	ld	b, h
   015B C5            [11]  321 	push	bc
   015C 21 02 08      [10]  322 	ld	hl, #0x0802
   015F E5            [11]  323 	push	hl
   0160 C5            [11]  324 	push	bc
   0161 21r00r00      [10]  325 	ld	hl, #_sp_font_00
   0164 E5            [11]  326 	push	hl
   0165 CDr00r00      [17]  327 	call	_cpct_drawSprite
                            328 ;src/hud.c:124: for (i = 0; i < 5; i++)
   0168 DD 36 FF 00   [19]  329 	ld	-1 (ix), #0x00
   016C                     330 00102$:
                            331 ;src/hud.c:126: u8 digit =  (score % 10);
   016C 21 0A 00      [10]  332 	ld	hl, #0x000a
   016F E5            [11]  333 	push	hl
   0170 DD 6E 04      [19]  334 	ld	l,4 (ix)
   0173 DD 66 05      [19]  335 	ld	h,5 (ix)
   0176 E5            [11]  336 	push	hl
   0177 CDr00r00      [17]  337 	call	__moduint
   017A F1            [10]  338 	pop	af
   017B F1            [10]  339 	pop	af
   017C 4D            [ 4]  340 	ld	c, l
                            341 ;src/hud.c:128: cpct_drawSprite(digits[digit], (svmem - (2 * (i+1))), SP_FONT_CHAR_W, SP_FONT_CHAR_H);
   017D DD 6E FF      [19]  342 	ld	l, -1 (ix)
   0180 26 00         [ 7]  343 	ld	h, #0x00
   0182 23            [ 6]  344 	inc	hl
   0183 29            [11]  345 	add	hl, hl
   0184 DD 7E FD      [19]  346 	ld	a, -3 (ix)
   0187 95            [ 4]  347 	sub	a, l
   0188 5F            [ 4]  348 	ld	e, a
   0189 DD 7E FE      [19]  349 	ld	a, -2 (ix)
   018C 9C            [ 4]  350 	sbc	a, h
   018D 57            [ 4]  351 	ld	d, a
   018E 69            [ 4]  352 	ld	l, c
   018F 26 00         [ 7]  353 	ld	h, #0x00
   0191 29            [11]  354 	add	hl, hl
   0192 01r00r00      [10]  355 	ld	bc, #_digits
   0195 09            [11]  356 	add	hl, bc
   0196 4E            [ 7]  357 	ld	c, (hl)
   0197 23            [ 6]  358 	inc	hl
   0198 46            [ 7]  359 	ld	b, (hl)
   0199 21 02 08      [10]  360 	ld	hl, #0x0802
   019C E5            [11]  361 	push	hl
   019D D5            [11]  362 	push	de
   019E C5            [11]  363 	push	bc
   019F CDr00r00      [17]  364 	call	_cpct_drawSprite
                            365 ;src/hud.c:129: score /= 10;
   01A2 21 0A 00      [10]  366 	ld	hl, #0x000a
   01A5 E5            [11]  367 	push	hl
   01A6 DD 6E 04      [19]  368 	ld	l,4 (ix)
   01A9 DD 66 05      [19]  369 	ld	h,5 (ix)
   01AC E5            [11]  370 	push	hl
   01AD CDr00r00      [17]  371 	call	__divuint
   01B0 F1            [10]  372 	pop	af
   01B1 F1            [10]  373 	pop	af
   01B2 DD 75 04      [19]  374 	ld	4 (ix), l
   01B5 DD 74 05      [19]  375 	ld	5 (ix), h
                            376 ;src/hud.c:124: for (i = 0; i < 5; i++)
   01B8 DD 34 FF      [23]  377 	inc	-1 (ix)
   01BB DD 7E FF      [19]  378 	ld	a, -1 (ix)
   01BE D6 05         [ 7]  379 	sub	a, #0x05
   01C0 38 AA         [12]  380 	jr	C,00102$
   01C2 DD F9         [10]  381 	ld	sp, ix
   01C4 DD E1         [14]  382 	pop	ix
   01C6 C9            [10]  383 	ret
                            384 ;src/hud.c:135: void hud_draw_lives(u8 row)
                            385 ;	---------------------------------
                            386 ; Function hud_draw_lives
                            387 ; ---------------------------------
   01C7                     388 _hud_draw_lives::
   01C7 DD E5         [15]  389 	push	ix
   01C9 DD 21 00 00   [14]  390 	ld	ix,#0
   01CD DD 39         [15]  391 	add	ix,sp
   01CF F5            [11]  392 	push	af
   01D0 3B            [ 6]  393 	dec	sp
                            394 ;src/hud.c:137: u8 num = current_level_num + 1;
   01D1 3Ar00r00      [13]  395 	ld	a,(#_current_level_num + 0)
   01D4 3C            [ 4]  396 	inc	a
   01D5 DD 77 FD      [19]  397 	ld	-3 (ix), a
                            398 ;src/hud.c:138: u8 *svmem = cpct_getScreenPtr(CPCT_VMEM_START, 74, row);
   01D8 DD 56 04      [19]  399 	ld	d, 4 (ix)
   01DB 1E 4A         [ 7]  400 	ld	e,#0x4a
   01DD D5            [11]  401 	push	de
   01DE 21 00 C0      [10]  402 	ld	hl, #0xc000
   01E1 E5            [11]  403 	push	hl
   01E2 CDr00r00      [17]  404 	call	_cpct_getScreenPtr
   01E5 DD 75 FE      [19]  405 	ld	-2 (ix), l
   01E8 DD 74 FF      [19]  406 	ld	-1 (ix), h
                            407 ;src/hud.c:141: u8 digit =  (num % 10);
   01EB 3E 0A         [ 7]  408 	ld	a, #0x0a
   01ED F5            [11]  409 	push	af
   01EE 33            [ 6]  410 	inc	sp
   01EF DD 7E FD      [19]  411 	ld	a, -3 (ix)
   01F2 F5            [11]  412 	push	af
   01F3 33            [ 6]  413 	inc	sp
   01F4 CDr00r00      [17]  414 	call	__moduchar
   01F7 F1            [10]  415 	pop	af
   01F8 4D            [ 4]  416 	ld	c, l
                            417 ;src/hud.c:142: cpct_drawSprite(digits[digit], svmem , SP_FONT_CHAR_W, SP_FONT_CHAR_H);
   01F9 DD 5E FE      [19]  418 	ld	e,-2 (ix)
   01FC DD 56 FF      [19]  419 	ld	d,-1 (ix)
   01FF 69            [ 4]  420 	ld	l, c
   0200 26 00         [ 7]  421 	ld	h, #0x00
   0202 29            [11]  422 	add	hl, hl
   0203 01r00r00      [10]  423 	ld	bc, #_digits
   0206 09            [11]  424 	add	hl, bc
   0207 4E            [ 7]  425 	ld	c, (hl)
   0208 23            [ 6]  426 	inc	hl
   0209 46            [ 7]  427 	ld	b, (hl)
   020A 21 02 08      [10]  428 	ld	hl, #0x0802
   020D E5            [11]  429 	push	hl
   020E D5            [11]  430 	push	de
   020F C5            [11]  431 	push	bc
   0210 CDr00r00      [17]  432 	call	_cpct_drawSprite
                            433 ;src/hud.c:144: digit =  ((num / 10) % 10);
   0213 3E 0A         [ 7]  434 	ld	a, #0x0a
   0215 F5            [11]  435 	push	af
   0216 33            [ 6]  436 	inc	sp
   0217 DD 7E FD      [19]  437 	ld	a, -3 (ix)
   021A F5            [11]  438 	push	af
   021B 33            [ 6]  439 	inc	sp
   021C CDr00r00      [17]  440 	call	__divuchar
   021F F1            [10]  441 	pop	af
   0220 45            [ 4]  442 	ld	b, l
   0221 3E 0A         [ 7]  443 	ld	a, #0x0a
   0223 F5            [11]  444 	push	af
   0224 33            [ 6]  445 	inc	sp
   0225 C5            [11]  446 	push	bc
   0226 33            [ 6]  447 	inc	sp
   0227 CDr00r00      [17]  448 	call	__moduchar
   022A F1            [10]  449 	pop	af
                            450 ;src/hud.c:145: cpct_drawSprite(digits[digit], svmem - 2 , SP_FONT_CHAR_W, SP_FONT_CHAR_H);
   022B DD 5E FE      [19]  451 	ld	e, -2 (ix)
   022E DD 56 FF      [19]  452 	ld	d, -1 (ix)
   0231 1B            [ 6]  453 	dec	de
   0232 1B            [ 6]  454 	dec	de
   0233 26 00         [ 7]  455 	ld	h, #0x00
   0235 29            [11]  456 	add	hl, hl
   0236 01r00r00      [10]  457 	ld	bc, #_digits
   0239 09            [11]  458 	add	hl, bc
   023A 4E            [ 7]  459 	ld	c, (hl)
   023B 23            [ 6]  460 	inc	hl
   023C 46            [ 7]  461 	ld	b, (hl)
   023D 21 02 08      [10]  462 	ld	hl, #0x0802
   0240 E5            [11]  463 	push	hl
   0241 D5            [11]  464 	push	de
   0242 C5            [11]  465 	push	bc
   0243 CDr00r00      [17]  466 	call	_cpct_drawSprite
   0246 DD F9         [10]  467 	ld	sp, ix
   0248 DD E1         [14]  468 	pop	ix
   024A C9            [10]  469 	ret
                            470 	.area _CODE
                            471 	.area _INITIALIZER
                            472 	.area _CABS (ABS)
