                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module balls
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _background_restore
                             12 	.globl _cpct_getScreenPtr
                             13 	.globl _cpct_drawSprite
                             14 	.globl _serving
                             15 	.globl _balls
                             16 	.globl _balls_initialize
                             17 	.globl _balls_update
                             18 	.globl _balls_restore_background
                             19 	.globl _balls_draw
                             20 	.globl _balls_get_first_active
                             21 	.globl _center_ball
                             22 	.globl _update_ball
                             23 	.globl _move_ball_x
                             24 	.globl _move_ball_y
                             25 	.globl _check_bat_collision
                             26 ;--------------------------------------------------------
                             27 ; special function registers
                             28 ;--------------------------------------------------------
                             29 ;--------------------------------------------------------
                             30 ; ram data
                             31 ;--------------------------------------------------------
                             32 	.area _DATA
   0000                      33 _balls::
   0000                      34 	.ds 21
   0015                      35 _serving::
   0015                      36 	.ds 1
                             37 ;--------------------------------------------------------
                             38 ; ram data
                             39 ;--------------------------------------------------------
                             40 	.area _INITIALIZED
                             41 ;--------------------------------------------------------
                             42 ; absolute external ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DABS (ABS)
                             45 ;--------------------------------------------------------
                             46 ; global & static initialisations
                             47 ;--------------------------------------------------------
                             48 	.area _HOME
                             49 	.area _GSINIT
                             50 	.area _GSFINAL
                             51 	.area _GSINIT
                             52 ;--------------------------------------------------------
                             53 ; Home
                             54 ;--------------------------------------------------------
                             55 	.area _HOME
                             56 	.area _HOME
                             57 ;--------------------------------------------------------
                             58 ; code
                             59 ;--------------------------------------------------------
                             60 	.area _CODE
                             61 ;src/balls.c:15: void balls_initialize()
                             62 ;	---------------------------------
                             63 ; Function balls_initialize
                             64 ; ---------------------------------
   0000                      65 _balls_initialize::
                             66 ;src/balls.c:18: serving = 1;
   0000 21r15r00      [10]   67 	ld	hl,#_serving + 0
   0003 36 01         [10]   68 	ld	(hl), #0x01
                             69 ;src/balls.c:21: for (u8 i = 0; i < MAX_BALLS; i++)
   0005 0E 00         [ 7]   70 	ld	c, #0x00
   0007                      71 00103$:
   0007 79            [ 4]   72 	ld	a, c
   0008 D6 03         [ 7]   73 	sub	a, #0x03
   000A 30 37         [12]   74 	jr	NC,00101$
                             75 ;src/balls.c:23: balls[i].active = 0;
   000C 06 00         [ 7]   76 	ld	b,#0x00
   000E 69            [ 4]   77 	ld	l, c
   000F 60            [ 4]   78 	ld	h, b
   0010 29            [11]   79 	add	hl, hl
   0011 09            [11]   80 	add	hl, bc
   0012 29            [11]   81 	add	hl, hl
   0013 09            [11]   82 	add	hl, bc
   0014 EB            [ 4]   83 	ex	de,hl
   0015 21r00r00      [10]   84 	ld	hl, #_balls
   0018 19            [11]   85 	add	hl,de
   0019 EB            [ 4]   86 	ex	de,hl
   001A AF            [ 4]   87 	xor	a, a
   001B 12            [ 7]   88 	ld	(de), a
                             89 ;src/balls.c:24: balls[i].x = TILE_MAP_SCREEN_BYTE_OFFSET_X;
   001C 6B            [ 4]   90 	ld	l, e
   001D 62            [ 4]   91 	ld	h, d
   001E 23            [ 6]   92 	inc	hl
   001F 36 08         [10]   93 	ld	(hl), #0x08
                             94 ;src/balls.c:25: balls[i].y = TILE_MAP_SCREEN_PIXEL_OFFSET_Y;
   0021 6B            [ 4]   95 	ld	l, e
   0022 62            [ 4]   96 	ld	h, d
   0023 23            [ 6]   97 	inc	hl
   0024 23            [ 6]   98 	inc	hl
   0025 36 00         [10]   99 	ld	(hl), #0x00
                            100 ;src/balls.c:26: balls[i].prev_x = TILE_MAP_SCREEN_BYTE_OFFSET_X;
   0027 6B            [ 4]  101 	ld	l, e
   0028 62            [ 4]  102 	ld	h, d
   0029 23            [ 6]  103 	inc	hl
   002A 23            [ 6]  104 	inc	hl
   002B 23            [ 6]  105 	inc	hl
   002C 36 08         [10]  106 	ld	(hl), #0x08
                            107 ;src/balls.c:27: balls[i].prev_y = TILE_MAP_SCREEN_PIXEL_OFFSET_Y;
   002E 21 04 00      [10]  108 	ld	hl, #0x0004
   0031 19            [11]  109 	add	hl, de
   0032 36 00         [10]  110 	ld	(hl), #0x00
                            111 ;src/balls.c:28: balls[i].dx = 1;
   0034 21 05 00      [10]  112 	ld	hl, #0x0005
   0037 19            [11]  113 	add	hl, de
   0038 36 01         [10]  114 	ld	(hl), #0x01
                            115 ;src/balls.c:29: balls[i].dy = 0;
   003A 21 06 00      [10]  116 	ld	hl, #0x0006
   003D 19            [11]  117 	add	hl, de
   003E 36 00         [10]  118 	ld	(hl), #0x00
                            119 ;src/balls.c:21: for (u8 i = 0; i < MAX_BALLS; i++)
   0040 0C            [ 4]  120 	inc	c
   0041 18 C4         [12]  121 	jr	00103$
   0043                     122 00101$:
                            123 ;src/balls.c:31: balls[0].active = 1;
   0043 21r00r00      [10]  124 	ld	hl, #_balls
   0046 36 01         [10]  125 	ld	(hl), #0x01
                            126 ;src/balls.c:34: center_ball(balls);
   0048 E5            [11]  127 	push	hl
   0049 CDr42r01      [17]  128 	call	_center_ball
   004C F1            [10]  129 	pop	af
   004D C9            [10]  130 	ret
                            131 ;src/balls.c:37: void balls_update()
                            132 ;	---------------------------------
                            133 ; Function balls_update
                            134 ; ---------------------------------
   004E                     135 _balls_update::
                            136 ;src/balls.c:39: Ball *ball = balls;
   004E 01r00r00      [10]  137 	ld	bc, #_balls+0
                            138 ;src/balls.c:40: if (serving)
   0051 3Ar15r00      [13]  139 	ld	a,(#_serving + 0)
   0054 B7            [ 4]  140 	or	a, a
   0055 28 2D         [12]  141 	jr	Z,00115$
                            142 ;src/balls.c:42: center_ball(ball);
   0057 C5            [11]  143 	push	bc
   0058 C5            [11]  144 	push	bc
   0059 CDr42r01      [17]  145 	call	_center_ball
   005C F1            [10]  146 	pop	af
   005D C1            [10]  147 	pop	bc
                            148 ;src/balls.c:43: if (key_serve_is_pressed)
   005E 3Ar00r00      [13]  149 	ld	a,(#_key_serve_is_pressed + 0)
   0061 B7            [ 4]  150 	or	a, a
   0062 C8            [11]  151 	ret	Z
                            152 ;src/balls.c:45: serving = 0;
   0063 21r15r00      [10]  153 	ld	hl,#_serving + 0
   0066 36 00         [10]  154 	ld	(hl), #0x00
                            155 ;src/balls.c:46: ball->dx = 1; // 45 degrees right
   0068 21r05r00      [10]  156 	ld	hl, #(_balls + 0x0005)
   006B 36 01         [10]  157 	ld	(hl), #0x01
                            158 ;src/balls.c:47: ball->dy = -2;
   006D 21r06r00      [10]  159 	ld	hl, #(_balls + 0x0006)
   0070 36 FE         [10]  160 	ld	(hl), #0xfe
                            161 ;src/balls.c:48: ball->prev_x = ball->x;
   0072 69            [ 4]  162 	ld	l, c
   0073 60            [ 4]  163 	ld	h, b
   0074 23            [ 6]  164 	inc	hl
   0075 5E            [ 7]  165 	ld	e, (hl)
   0076 21r03r00      [10]  166 	ld	hl, #(_balls + 0x0003)
   0079 73            [ 7]  167 	ld	(hl), e
                            168 ;src/balls.c:49: ball->prev_y = ball->y;
   007A 69            [ 4]  169 	ld	l, c
   007B 60            [ 4]  170 	ld	h, b
   007C 23            [ 6]  171 	inc	hl
   007D 23            [ 6]  172 	inc	hl
   007E 4E            [ 7]  173 	ld	c, (hl)
   007F 21r04r00      [10]  174 	ld	hl, #(_balls + 0x0004)
   0082 71            [ 7]  175 	ld	(hl), c
   0083 C9            [10]  176 	ret
                            177 ;src/balls.c:54: for (u8 i = 0; i < MAX_BALLS; i++)
   0084                     178 00115$:
   0084 1E 00         [ 7]  179 	ld	e, #0x00
   0086                     180 00108$:
   0086 7B            [ 4]  181 	ld	a, e
   0087 D6 03         [ 7]  182 	sub	a, #0x03
   0089 D0            [11]  183 	ret	NC
                            184 ;src/balls.c:56: update_ball(ball);
   008A C5            [11]  185 	push	bc
   008B D5            [11]  186 	push	de
   008C C5            [11]  187 	push	bc
   008D CDr85r01      [17]  188 	call	_update_ball
   0090 F1            [10]  189 	pop	af
   0091 D1            [10]  190 	pop	de
   0092 C1            [10]  191 	pop	bc
                            192 ;src/balls.c:57: ball++;
   0093 21 07 00      [10]  193 	ld	hl, #0x0007
   0096 09            [11]  194 	add	hl,bc
   0097 4D            [ 4]  195 	ld	c, l
   0098 44            [ 4]  196 	ld	b, h
                            197 ;src/balls.c:54: for (u8 i = 0; i < MAX_BALLS; i++)
   0099 1C            [ 4]  198 	inc	e
   009A 18 EA         [12]  199 	jr	00108$
                            200 ;src/balls.c:62: void balls_restore_background()
                            201 ;	---------------------------------
                            202 ; Function balls_restore_background
                            203 ; ---------------------------------
   009C                     204 _balls_restore_background::
   009C DD E5         [15]  205 	push	ix
   009E DD 21 00 00   [14]  206 	ld	ix,#0
   00A2 DD 39         [15]  207 	add	ix,sp
   00A4 3B            [ 6]  208 	dec	sp
                            209 ;src/balls.c:64: Ball *ball = balls;
   00A5 01r00r00      [10]  210 	ld	bc, #_balls
                            211 ;src/balls.c:65: for (u8 i = 0; i < MAX_BALLS; i++)
   00A8 DD 36 FF 00   [19]  212 	ld	-1 (ix), #0x00
   00AC                     213 00105$:
   00AC DD 7E FF      [19]  214 	ld	a, -1 (ix)
   00AF D6 03         [ 7]  215 	sub	a, #0x03
   00B1 30 29         [12]  216 	jr	NC,00107$
                            217 ;src/balls.c:67: if (ball->active)
   00B3 0A            [ 7]  218 	ld	a, (bc)
   00B4 B7            [ 4]  219 	or	a, a
   00B5 28 1A         [12]  220 	jr	Z,00102$
                            221 ;src/balls.c:69: background_restore(ball->prev_x, balls->prev_y, SP_BALL_W, SP_BALL_H);
   00B7 21r04r00      [10]  222 	ld	hl, #_balls + 4
   00BA 5E            [ 7]  223 	ld	e, (hl)
   00BB 69            [ 4]  224 	ld	l, c
   00BC 60            [ 4]  225 	ld	h, b
   00BD 23            [ 6]  226 	inc	hl
   00BE 23            [ 6]  227 	inc	hl
   00BF 23            [ 6]  228 	inc	hl
   00C0 56            [ 7]  229 	ld	d, (hl)
   00C1 C5            [11]  230 	push	bc
   00C2 21 03 06      [10]  231 	ld	hl, #0x0603
   00C5 E5            [11]  232 	push	hl
   00C6 7B            [ 4]  233 	ld	a, e
   00C7 F5            [11]  234 	push	af
   00C8 33            [ 6]  235 	inc	sp
   00C9 D5            [11]  236 	push	de
   00CA 33            [ 6]  237 	inc	sp
   00CB CDr00r00      [17]  238 	call	_background_restore
   00CE F1            [10]  239 	pop	af
   00CF F1            [10]  240 	pop	af
   00D0 C1            [10]  241 	pop	bc
   00D1                     242 00102$:
                            243 ;src/balls.c:71: ball++;
   00D1 21 07 00      [10]  244 	ld	hl, #0x0007
   00D4 09            [11]  245 	add	hl,bc
   00D5 4D            [ 4]  246 	ld	c, l
   00D6 44            [ 4]  247 	ld	b, h
                            248 ;src/balls.c:65: for (u8 i = 0; i < MAX_BALLS; i++)
   00D7 DD 34 FF      [23]  249 	inc	-1 (ix)
   00DA 18 D0         [12]  250 	jr	00105$
   00DC                     251 00107$:
   00DC 33            [ 6]  252 	inc	sp
   00DD DD E1         [14]  253 	pop	ix
   00DF C9            [10]  254 	ret
                            255 ;src/balls.c:75: void balls_draw()
                            256 ;	---------------------------------
                            257 ; Function balls_draw
                            258 ; ---------------------------------
   00E0                     259 _balls_draw::
                            260 ;src/balls.c:79: for (u8 i = 0; i < MAX_BALLS; i++)
   00E0 0E 00         [ 7]  261 	ld	c, #0x00
   00E2                     262 00105$:
   00E2 79            [ 4]  263 	ld	a, c
   00E3 D6 03         [ 7]  264 	sub	a, #0x03
   00E5 D0            [11]  265 	ret	NC
                            266 ;src/balls.c:81: if (balls->active)
   00E6 3Ar00r00      [13]  267 	ld	a, (#_balls + 0)
   00E9 B7            [ 4]  268 	or	a, a
   00EA 28 1F         [12]  269 	jr	Z,00106$
                            270 ;src/balls.c:83: svmem = cpct_getScreenPtr(CPCT_VMEM_START, balls->x, balls->y);
   00EC 21r02r00      [10]  271 	ld	hl, #_balls + 2
   00EF 46            [ 7]  272 	ld	b, (hl)
   00F0 21r01r00      [10]  273 	ld	hl, #_balls + 1
   00F3 56            [ 7]  274 	ld	d, (hl)
   00F4 C5            [11]  275 	push	bc
   00F5 4A            [ 4]  276 	ld	c, d
   00F6 C5            [11]  277 	push	bc
   00F7 21 00 C0      [10]  278 	ld	hl, #0xc000
   00FA E5            [11]  279 	push	hl
   00FB CDr00r00      [17]  280 	call	_cpct_getScreenPtr
   00FE 11 03 06      [10]  281 	ld	de, #0x0603
   0101 D5            [11]  282 	push	de
   0102 E5            [11]  283 	push	hl
   0103 21r00r00      [10]  284 	ld	hl, #_sp_ball
   0106 E5            [11]  285 	push	hl
   0107 CDr00r00      [17]  286 	call	_cpct_drawSprite
   010A C1            [10]  287 	pop	bc
   010B                     288 00106$:
                            289 ;src/balls.c:79: for (u8 i = 0; i < MAX_BALLS; i++)
   010B 0C            [ 4]  290 	inc	c
   010C 18 D4         [12]  291 	jr	00105$
                            292 ;src/balls.c:89: Ball *balls_get_first_active()
                            293 ;	---------------------------------
                            294 ; Function balls_get_first_active
                            295 ; ---------------------------------
   010E                     296 _balls_get_first_active::
   010E DD E5         [15]  297 	push	ix
   0110 DD 21 00 00   [14]  298 	ld	ix,#0
   0114 DD 39         [15]  299 	add	ix,sp
   0116 F5            [11]  300 	push	af
                            301 ;src/balls.c:91: Ball *ball = balls;
   0117 DD 36 FEr00   [19]  302 	ld	-2 (ix), #<(_balls)
   011B DD 36 FFs00   [19]  303 	ld	-1 (ix), #>(_balls)
                            304 ;src/balls.c:92: for (u8 i = 0; i < MAX_BALLS; i++)
   011F E1            [10]  305 	pop	hl
   0120 E5            [11]  306 	push	hl
   0121 0E 00         [ 7]  307 	ld	c, #0x00
   0123                     308 00105$:
   0123 79            [ 4]  309 	ld	a, c
   0124 D6 03         [ 7]  310 	sub	a, #0x03
   0126 30 12         [12]  311 	jr	NC,00103$
                            312 ;src/balls.c:94: if (ball->active)
   0128 7E            [ 7]  313 	ld	a, (hl)
   0129 B7            [ 4]  314 	or	a, a
   012A 28 04         [12]  315 	jr	Z,00102$
                            316 ;src/balls.c:96: return ball;
   012C E1            [10]  317 	pop	hl
   012D E5            [11]  318 	push	hl
   012E 18 0D         [12]  319 	jr	00107$
   0130                     320 00102$:
                            321 ;src/balls.c:98: ball++;
   0130 11 07 00      [10]  322 	ld	de, #0x0007
   0133 19            [11]  323 	add	hl, de
   0134 33            [ 6]  324 	inc	sp
   0135 33            [ 6]  325 	inc	sp
   0136 E5            [11]  326 	push	hl
                            327 ;src/balls.c:92: for (u8 i = 0; i < MAX_BALLS; i++)
   0137 0C            [ 4]  328 	inc	c
   0138 18 E9         [12]  329 	jr	00105$
   013A                     330 00103$:
                            331 ;src/balls.c:100: return NULL;
   013A 21 00 00      [10]  332 	ld	hl, #0x0000
   013D                     333 00107$:
   013D DD F9         [10]  334 	ld	sp, ix
   013F DD E1         [14]  335 	pop	ix
   0141 C9            [10]  336 	ret
                            337 ;src/balls.c:106: void center_ball(Ball *ball)
                            338 ;	---------------------------------
                            339 ; Function center_ball
                            340 ; ---------------------------------
   0142                     341 _center_ball::
   0142 DD E5         [15]  342 	push	ix
   0144 DD 21 00 00   [14]  343 	ld	ix,#0
   0148 DD 39         [15]  344 	add	ix,sp
                            345 ;src/balls.c:108: ball->prev_x = ball->x;
   014A DD 4E 04      [19]  346 	ld	c,4 (ix)
   014D DD 46 05      [19]  347 	ld	b,5 (ix)
   0150 C5            [11]  348 	push	bc
   0151 FD E1         [14]  349 	pop	iy
   0153 FD 23         [10]  350 	inc	iy
   0155 FD 23         [10]  351 	inc	iy
   0157 FD 23         [10]  352 	inc	iy
   0159 59            [ 4]  353 	ld	e, c
   015A 50            [ 4]  354 	ld	d, b
   015B 13            [ 6]  355 	inc	de
   015C 1A            [ 7]  356 	ld	a, (de)
   015D FD 77 00      [19]  357 	ld	0 (iy), a
                            358 ;src/balls.c:109: ball->prev_y = ball->y;
   0160 FD 21 04 00   [14]  359 	ld	iy, #0x0004
   0164 FD 09         [15]  360 	add	iy, bc
   0166 03            [ 6]  361 	inc	bc
   0167 03            [ 6]  362 	inc	bc
   0168 0A            [ 7]  363 	ld	a, (bc)
   0169 FD 77 00      [19]  364 	ld	0 (iy), a
                            365 ;src/balls.c:110: ball->x = batX + (batW / 4);
   016C FD 21r00r00   [14]  366 	ld	iy, #_batW
   0170 FD 6E 00      [19]  367 	ld	l, 0 (iy)
   0173 CB 3D         [ 8]  368 	srl	l
   0175 CB 3D         [ 8]  369 	srl	l
   0177 3Ar00r00      [13]  370 	ld	a,(#_batX + 0)
   017A 85            [ 4]  371 	add	a, l
   017B 12            [ 7]  372 	ld	(de), a
                            373 ;src/balls.c:111: ball->y = batY - SP_BALL_H;
   017C 3Ar00r00      [13]  374 	ld	a,(#_batY + 0)
   017F C6 FA         [ 7]  375 	add	a, #0xfa
   0181 02            [ 7]  376 	ld	(bc), a
   0182 DD E1         [14]  377 	pop	ix
   0184 C9            [10]  378 	ret
                            379 ;src/balls.c:114: void update_ball(Ball *ball)
                            380 ;	---------------------------------
                            381 ; Function update_ball
                            382 ; ---------------------------------
   0185                     383 _update_ball::
   0185 DD E5         [15]  384 	push	ix
   0187 DD 21 00 00   [14]  385 	ld	ix,#0
   018B DD 39         [15]  386 	add	ix,sp
                            387 ;src/balls.c:116: ball->prev_x = ball->x;
   018D DD 4E 04      [19]  388 	ld	c,4 (ix)
   0190 DD 46 05      [19]  389 	ld	b,5 (ix)
   0193 59            [ 4]  390 	ld	e, c
   0194 50            [ 4]  391 	ld	d, b
   0195 13            [ 6]  392 	inc	de
   0196 13            [ 6]  393 	inc	de
   0197 13            [ 6]  394 	inc	de
   0198 69            [ 4]  395 	ld	l, c
   0199 60            [ 4]  396 	ld	h, b
   019A 23            [ 6]  397 	inc	hl
   019B 7E            [ 7]  398 	ld	a, (hl)
   019C 12            [ 7]  399 	ld	(de), a
                            400 ;src/balls.c:117: ball->prev_y = ball->y;
   019D 21 04 00      [10]  401 	ld	hl, #0x0004
   01A0 09            [11]  402 	add	hl,bc
   01A1 EB            [ 4]  403 	ex	de,hl
   01A2 69            [ 4]  404 	ld	l, c
   01A3 60            [ 4]  405 	ld	h, b
   01A4 23            [ 6]  406 	inc	hl
   01A5 23            [ 6]  407 	inc	hl
   01A6 7E            [ 7]  408 	ld	a, (hl)
   01A7 12            [ 7]  409 	ld	(de), a
                            410 ;src/balls.c:118: move_ball_x(ball);
   01A8 C5            [11]  411 	push	bc
   01A9 CDrBBr01      [17]  412 	call	_move_ball_x
   01AC F1            [10]  413 	pop	af
                            414 ;src/balls.c:119: move_ball_y(ball);
   01AD DD 6E 04      [19]  415 	ld	l,4 (ix)
   01B0 DD 66 05      [19]  416 	ld	h,5 (ix)
   01B3 E5            [11]  417 	push	hl
   01B4 CDr10r02      [17]  418 	call	_move_ball_y
   01B7 F1            [10]  419 	pop	af
   01B8 DD E1         [14]  420 	pop	ix
   01BA C9            [10]  421 	ret
                            422 ;src/balls.c:123: void move_ball_x(Ball *ball)
                            423 ;	---------------------------------
                            424 ; Function move_ball_x
                            425 ; ---------------------------------
   01BB                     426 _move_ball_x::
   01BB DD E5         [15]  427 	push	ix
   01BD DD 21 00 00   [14]  428 	ld	ix,#0
   01C1 DD 39         [15]  429 	add	ix,sp
                            430 ;src/balls.c:125: if (ball->active)
   01C3 DD 5E 04      [19]  431 	ld	e,4 (ix)
   01C6 DD 56 05      [19]  432 	ld	d,5 (ix)
   01C9 1A            [ 7]  433 	ld	a, (de)
   01CA B7            [ 4]  434 	or	a, a
   01CB 28 40         [12]  435 	jr	Z,00112$
                            436 ;src/balls.c:127: u8 new_x = ball->x + ball->dx;
   01CD D5            [11]  437 	push	de
   01CE FD E1         [14]  438 	pop	iy
   01D0 FD 23         [10]  439 	inc	iy
   01D2 FD 4E 00      [19]  440 	ld	c, 0 (iy)
   01D5 21 05 00      [10]  441 	ld	hl, #0x0005
   01D8 19            [11]  442 	add	hl, de
   01D9 5E            [ 7]  443 	ld	e, (hl)
   01DA 79            [ 4]  444 	ld	a, c
   01DB 83            [ 4]  445 	add	a, e
   01DC 4F            [ 4]  446 	ld	c, a
                            447 ;src/balls.c:130: if (ball->dx > 0)
   01DD AF            [ 4]  448 	xor	a, a
   01DE 93            [ 4]  449 	sub	a, e
   01DF E2rE4r01      [10]  450 	jp	PO, 00130$
   01E2 EE 80         [ 7]  451 	xor	a, #0x80
   01E4                     452 00130$:
   01E4 F2rFBr01      [10]  453 	jp	P, 00108$
                            454 ;src/balls.c:133: if (new_x >= PLAY_AREA_RIGHT_EDGE - SP_BALL_W)
   01E7 79            [ 4]  455 	ld	a, c
   01E8 D6 3D         [ 7]  456 	sub	a, #0x3d
   01EA 38 0A         [12]  457 	jr	C,00102$
                            458 ;src/balls.c:135: ball->x = PLAY_AREA_RIGHT_EDGE - SP_BALL_W;
   01EC FD 36 00 3D   [19]  459 	ld	0 (iy), #0x3d
                            460 ;src/balls.c:136: ball->dx = -ball->dx;
   01F0 4E            [ 7]  461 	ld	c, (hl)
   01F1 AF            [ 4]  462 	xor	a, a
   01F2 91            [ 4]  463 	sub	a, c
   01F3 77            [ 7]  464 	ld	(hl), a
   01F4 18 17         [12]  465 	jr	00112$
   01F6                     466 00102$:
                            467 ;src/balls.c:140: ball->x = new_x;
   01F6 FD 71 00      [19]  468 	ld	0 (iy), c
   01F9 18 12         [12]  469 	jr	00112$
   01FB                     470 00108$:
                            471 ;src/balls.c:147: if (new_x <= PLAY_AREA_LEFT_EDGE)
   01FB 3E 0C         [ 7]  472 	ld	a, #0x0c
   01FD 91            [ 4]  473 	sub	a, c
   01FE 38 0A         [12]  474 	jr	C,00105$
                            475 ;src/balls.c:149: ball->x = PLAY_AREA_LEFT_EDGE;
   0200 FD 36 00 0C   [19]  476 	ld	0 (iy), #0x0c
                            477 ;src/balls.c:150: ball->dx = -ball->dx;
   0204 4E            [ 7]  478 	ld	c, (hl)
   0205 AF            [ 4]  479 	xor	a, a
   0206 91            [ 4]  480 	sub	a, c
   0207 77            [ 7]  481 	ld	(hl), a
   0208 18 03         [12]  482 	jr	00112$
   020A                     483 00105$:
                            484 ;src/balls.c:154: ball->x = new_x;
   020A FD 71 00      [19]  485 	ld	0 (iy), c
   020D                     486 00112$:
   020D DD E1         [14]  487 	pop	ix
   020F C9            [10]  488 	ret
                            489 ;src/balls.c:162: void move_ball_y(Ball * ball)
                            490 ;	---------------------------------
                            491 ; Function move_ball_y
                            492 ; ---------------------------------
   0210                     493 _move_ball_y::
   0210 DD E5         [15]  494 	push	ix
   0212 DD 21 00 00   [14]  495 	ld	ix,#0
   0216 DD 39         [15]  496 	add	ix,sp
   0218 F5            [11]  497 	push	af
                            498 ;src/balls.c:165: u8 new_y = ball->y + ball->dy;
   0219 DD 4E 04      [19]  499 	ld	c,4 (ix)
   021C DD 46 05      [19]  500 	ld	b,5 (ix)
   021F 59            [ 4]  501 	ld	e, c
   0220 50            [ 4]  502 	ld	d, b
   0221 13            [ 6]  503 	inc	de
   0222 13            [ 6]  504 	inc	de
   0223 1A            [ 7]  505 	ld	a, (de)
   0224 DD 77 FF      [19]  506 	ld	-1 (ix), a
   0227 FD 21 06 00   [14]  507 	ld	iy, #0x0006
   022B FD 09         [15]  508 	add	iy, bc
   022D FD 6E 00      [19]  509 	ld	l, 0 (iy)
   0230 DD 7E FF      [19]  510 	ld	a, -1 (ix)
   0233 85            [ 4]  511 	add	a, l
   0234 DD 77 FE      [19]  512 	ld	-2 (ix), a
                            513 ;src/balls.c:168: if (ball->dy < 0)
   0237 CB 7D         [ 8]  514 	bit	7, l
   0239 28 1A         [12]  515 	jr	Z,00108$
                            516 ;src/balls.c:170: if (new_y <= PLAY_AREA_TOP_EDGE)
   023B 3E 08         [ 7]  517 	ld	a, #0x08
   023D DD 96 FE      [19]  518 	sub	a, -2 (ix)
   0240 38 0D         [12]  519 	jr	C,00102$
                            520 ;src/balls.c:172: ball->y = PLAY_AREA_TOP_EDGE;
   0242 3E 08         [ 7]  521 	ld	a, #0x08
   0244 12            [ 7]  522 	ld	(de), a
                            523 ;src/balls.c:173: ball->dy = -ball->dy;
   0245 FD 4E 00      [19]  524 	ld	c, 0 (iy)
   0248 AF            [ 4]  525 	xor	a, a
   0249 91            [ 4]  526 	sub	a, c
   024A FD 77 00      [19]  527 	ld	0 (iy), a
   024D 18 26         [12]  528 	jr	00109$
   024F                     529 00102$:
                            530 ;src/balls.c:177: ball->y = new_y;
   024F DD 7E FE      [19]  531 	ld	a, -2 (ix)
   0252 12            [ 7]  532 	ld	(de), a
   0253 18 20         [12]  533 	jr	00109$
   0255                     534 00108$:
                            535 ;src/balls.c:184: if (new_y >= YOUR_DEAD_PIXEL_ROW)
   0255 DD 7E FE      [19]  536 	ld	a, -2 (ix)
   0258 D6 C2         [ 7]  537 	sub	a, #0xc2
   025A 38 0C         [12]  538 	jr	C,00105$
                            539 ;src/balls.c:187: ball->active = 0;
   025C AF            [ 4]  540 	xor	a, a
   025D 02            [ 7]  541 	ld	(bc), a
                            542 ;src/balls.c:188: ball->dy = -ball->dy;
   025E FD 4E 00      [19]  543 	ld	c, 0 (iy)
   0261 AF            [ 4]  544 	xor	a, a
   0262 91            [ 4]  545 	sub	a, c
   0263 FD 77 00      [19]  546 	ld	0 (iy), a
   0266 18 0D         [12]  547 	jr	00109$
   0268                     548 00105$:
                            549 ;src/balls.c:193: check_bat_collision(ball, new_y);
   0268 D5            [11]  550 	push	de
   0269 DD 7E FE      [19]  551 	ld	a, -2 (ix)
   026C F5            [11]  552 	push	af
   026D 33            [ 6]  553 	inc	sp
   026E C5            [11]  554 	push	bc
   026F CDr7Er02      [17]  555 	call	_check_bat_collision
   0272 F1            [10]  556 	pop	af
   0273 33            [ 6]  557 	inc	sp
   0274 D1            [10]  558 	pop	de
   0275                     559 00109$:
                            560 ;src/balls.c:196: ball->y = new_y;
   0275 DD 7E FE      [19]  561 	ld	a, -2 (ix)
   0278 12            [ 7]  562 	ld	(de), a
   0279 DD F9         [10]  563 	ld	sp, ix
   027B DD E1         [14]  564 	pop	ix
   027D C9            [10]  565 	ret
                            566 ;src/balls.c:199: void check_bat_collision(Ball * ball, u8 new_y)
                            567 ;	---------------------------------
                            568 ; Function check_bat_collision
                            569 ; ---------------------------------
   027E                     570 _check_bat_collision::
   027E DD E5         [15]  571 	push	ix
   0280 DD 21 00 00   [14]  572 	ld	ix,#0
   0284 DD 39         [15]  573 	add	ix,sp
   0286 F5            [11]  574 	push	af
   0287 F5            [11]  575 	push	af
                            576 ;src/balls.c:201: if ((ball->x + SP_BALL_W >= batX && ball->x <= batX+batW) && 
   0288 DD 7E 04      [19]  577 	ld	a, 4 (ix)
   028B DD 77 FE      [19]  578 	ld	-2 (ix), a
   028E DD 7E 05      [19]  579 	ld	a, 5 (ix)
   0291 DD 77 FF      [19]  580 	ld	-1 (ix), a
   0294 C1            [10]  581 	pop	bc
   0295 E1            [10]  582 	pop	hl
   0296 E5            [11]  583 	push	hl
   0297 C5            [11]  584 	push	bc
   0298 23            [ 6]  585 	inc	hl
   0299 4E            [ 7]  586 	ld	c, (hl)
   029A 06 00         [ 7]  587 	ld	b, #0x00
   029C 21 03 00      [10]  588 	ld	hl, #0x0003
   029F 09            [11]  589 	add	hl,bc
   02A0 E3            [19]  590 	ex	(sp), hl
   02A1 21r00r00      [10]  591 	ld	hl,#_batX + 0
   02A4 5E            [ 7]  592 	ld	e, (hl)
   02A5 16 00         [ 7]  593 	ld	d, #0x00
   02A7 DD 7E FC      [19]  594 	ld	a, -4 (ix)
   02AA 93            [ 4]  595 	sub	a, e
   02AB DD 7E FD      [19]  596 	ld	a, -3 (ix)
   02AE 9A            [ 4]  597 	sbc	a, d
   02AF E2rB4r02      [10]  598 	jp	PO, 00124$
   02B2 EE 80         [ 7]  599 	xor	a, #0x80
   02B4                     600 00124$:
   02B4 FAr10r03      [10]  601 	jp	M, 00106$
   02B7 FD 21r00r00   [14]  602 	ld	iy, #_batW
   02BB FD 6E 00      [19]  603 	ld	l, 0 (iy)
   02BE 26 00         [ 7]  604 	ld	h, #0x00
   02C0 19            [11]  605 	add	hl, de
   02C1 7D            [ 4]  606 	ld	a, l
   02C2 91            [ 4]  607 	sub	a, c
   02C3 7C            [ 4]  608 	ld	a, h
   02C4 98            [ 4]  609 	sbc	a, b
   02C5 E2rCAr02      [10]  610 	jp	PO, 00125$
   02C8 EE 80         [ 7]  611 	xor	a, #0x80
   02CA                     612 00125$:
   02CA FAr10r03      [10]  613 	jp	M, 00106$
                            614 ;src/balls.c:202: (ball->y + SP_BALL_H >= batY && ball->y < batY + SP_BAT_LEFT_H))
   02CD C1            [10]  615 	pop	bc
   02CE E1            [10]  616 	pop	hl
   02CF E5            [11]  617 	push	hl
   02D0 C5            [11]  618 	push	bc
   02D1 23            [ 6]  619 	inc	hl
   02D2 23            [ 6]  620 	inc	hl
   02D3 4E            [ 7]  621 	ld	c, (hl)
   02D4 06 00         [ 7]  622 	ld	b, #0x00
   02D6 21 06 00      [10]  623 	ld	hl, #0x0006
   02D9 09            [11]  624 	add	hl,bc
   02DA EB            [ 4]  625 	ex	de,hl
   02DB FD 21r00r00   [14]  626 	ld	iy, #_batY
   02DF FD 6E 00      [19]  627 	ld	l, 0 (iy)
   02E2 26 00         [ 7]  628 	ld	h, #0x00
   02E4 7B            [ 4]  629 	ld	a, e
   02E5 95            [ 4]  630 	sub	a, l
   02E6 7A            [ 4]  631 	ld	a, d
   02E7 9C            [ 4]  632 	sbc	a, h
   02E8 E2rEDr02      [10]  633 	jp	PO, 00126$
   02EB EE 80         [ 7]  634 	xor	a, #0x80
   02ED                     635 00126$:
   02ED FAr10r03      [10]  636 	jp	M, 00106$
   02F0 11 08 00      [10]  637 	ld	de, #0x0008
   02F3 19            [11]  638 	add	hl, de
   02F4 79            [ 4]  639 	ld	a, c
   02F5 95            [ 4]  640 	sub	a, l
   02F6 78            [ 4]  641 	ld	a, b
   02F7 9C            [ 4]  642 	sbc	a, h
   02F8 E2rFDr02      [10]  643 	jp	PO, 00127$
   02FB EE 80         [ 7]  644 	xor	a, #0x80
   02FD                     645 00127$:
   02FD F2r10r03      [10]  646 	jp	P, 00106$
                            647 ;src/balls.c:204: ball-> dy = - ball->dy;
   0300 DD 7E FE      [19]  648 	ld	a, -2 (ix)
   0303 C6 06         [ 7]  649 	add	a, #0x06
   0305 6F            [ 4]  650 	ld	l, a
   0306 DD 7E FF      [19]  651 	ld	a, -1 (ix)
   0309 CE 00         [ 7]  652 	adc	a, #0x00
   030B 67            [ 4]  653 	ld	h, a
   030C 4E            [ 7]  654 	ld	c, (hl)
   030D AF            [ 4]  655 	xor	a, a
   030E 91            [ 4]  656 	sub	a, c
   030F 77            [ 7]  657 	ld	(hl), a
   0310                     658 00106$:
   0310 DD F9         [10]  659 	ld	sp, ix
   0312 DD E1         [14]  660 	pop	ix
   0314 C9            [10]  661 	ret
                            662 	.area _CODE
                            663 	.area _INITIALIZER
                            664 	.area _CABS (ABS)
