                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module balls
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _background_restore
                             12 	.globl _blocks_intersect_ball
                             13 	.globl _cpct_getScreenPtr
                             14 	.globl _cpct_drawSprite
                             15 	.globl _serving
                             16 	.globl _balls
                             17 	.globl _balls_initialize
                             18 	.globl _balls_update
                             19 	.globl _balls_restore_background
                             20 	.globl _balls_draw
                             21 	.globl _balls_get_first_active
                             22 	.globl _center_ball
                             23 	.globl _update_ball
                             24 	.globl _move_ball_x
                             25 	.globl _move_ball_y
                             26 	.globl _check_bat_collision
                             27 ;--------------------------------------------------------
                             28 ; special function registers
                             29 ;--------------------------------------------------------
                             30 ;--------------------------------------------------------
                             31 ; ram data
                             32 ;--------------------------------------------------------
                             33 	.area _DATA
   0000                      34 _balls::
   0000                      35 	.ds 21
   0015                      36 _serving::
   0015                      37 	.ds 1
                             38 ;--------------------------------------------------------
                             39 ; ram data
                             40 ;--------------------------------------------------------
                             41 	.area _INITIALIZED
                             42 ;--------------------------------------------------------
                             43 ; absolute external ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DABS (ABS)
                             46 ;--------------------------------------------------------
                             47 ; global & static initialisations
                             48 ;--------------------------------------------------------
                             49 	.area _HOME
                             50 	.area _GSINIT
                             51 	.area _GSFINAL
                             52 	.area _GSINIT
                             53 ;--------------------------------------------------------
                             54 ; Home
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _HOME
                             58 ;--------------------------------------------------------
                             59 ; code
                             60 ;--------------------------------------------------------
                             61 	.area _CODE
                             62 ;src/balls.c:16: void balls_initialize()
                             63 ;	---------------------------------
                             64 ; Function balls_initialize
                             65 ; ---------------------------------
   0000                      66 _balls_initialize::
                             67 ;src/balls.c:19: serving = 1;
   0000 21r15r00      [10]   68 	ld	hl,#_serving + 0
   0003 36 01         [10]   69 	ld	(hl), #0x01
                             70 ;src/balls.c:22: for (u8 i = 0; i < MAX_BALLS; i++)
   0005 0E 00         [ 7]   71 	ld	c, #0x00
   0007                      72 00103$:
   0007 79            [ 4]   73 	ld	a, c
   0008 D6 03         [ 7]   74 	sub	a, #0x03
   000A 30 37         [12]   75 	jr	NC,00101$
                             76 ;src/balls.c:24: balls[i].active = 0;
   000C 06 00         [ 7]   77 	ld	b,#0x00
   000E 69            [ 4]   78 	ld	l, c
   000F 60            [ 4]   79 	ld	h, b
   0010 29            [11]   80 	add	hl, hl
   0011 09            [11]   81 	add	hl, bc
   0012 29            [11]   82 	add	hl, hl
   0013 09            [11]   83 	add	hl, bc
   0014 EB            [ 4]   84 	ex	de,hl
   0015 21r00r00      [10]   85 	ld	hl, #_balls
   0018 19            [11]   86 	add	hl,de
   0019 EB            [ 4]   87 	ex	de,hl
   001A AF            [ 4]   88 	xor	a, a
   001B 12            [ 7]   89 	ld	(de), a
                             90 ;src/balls.c:25: balls[i].x = TILE_MAP_SCREEN_BYTE_OFFSET_X;
   001C 6B            [ 4]   91 	ld	l, e
   001D 62            [ 4]   92 	ld	h, d
   001E 23            [ 6]   93 	inc	hl
   001F 36 08         [10]   94 	ld	(hl), #0x08
                             95 ;src/balls.c:26: balls[i].y = TILE_MAP_SCREEN_PIXEL_OFFSET_Y;
   0021 6B            [ 4]   96 	ld	l, e
   0022 62            [ 4]   97 	ld	h, d
   0023 23            [ 6]   98 	inc	hl
   0024 23            [ 6]   99 	inc	hl
   0025 36 00         [10]  100 	ld	(hl), #0x00
                            101 ;src/balls.c:27: balls[i].prev_x = TILE_MAP_SCREEN_BYTE_OFFSET_X;
   0027 6B            [ 4]  102 	ld	l, e
   0028 62            [ 4]  103 	ld	h, d
   0029 23            [ 6]  104 	inc	hl
   002A 23            [ 6]  105 	inc	hl
   002B 23            [ 6]  106 	inc	hl
   002C 36 08         [10]  107 	ld	(hl), #0x08
                            108 ;src/balls.c:28: balls[i].prev_y = TILE_MAP_SCREEN_PIXEL_OFFSET_Y;
   002E 21 04 00      [10]  109 	ld	hl, #0x0004
   0031 19            [11]  110 	add	hl, de
   0032 36 00         [10]  111 	ld	(hl), #0x00
                            112 ;src/balls.c:29: balls[i].dx = 1;
   0034 21 05 00      [10]  113 	ld	hl, #0x0005
   0037 19            [11]  114 	add	hl, de
   0038 36 01         [10]  115 	ld	(hl), #0x01
                            116 ;src/balls.c:30: balls[i].dy = 0;
   003A 21 06 00      [10]  117 	ld	hl, #0x0006
   003D 19            [11]  118 	add	hl, de
   003E 36 00         [10]  119 	ld	(hl), #0x00
                            120 ;src/balls.c:22: for (u8 i = 0; i < MAX_BALLS; i++)
   0040 0C            [ 4]  121 	inc	c
   0041 18 C4         [12]  122 	jr	00103$
   0043                     123 00101$:
                            124 ;src/balls.c:32: balls[0].active = 1;
   0043 21r00r00      [10]  125 	ld	hl, #_balls
   0046 36 01         [10]  126 	ld	(hl), #0x01
                            127 ;src/balls.c:35: center_ball(balls);
   0048 E5            [11]  128 	push	hl
   0049 CDr42r01      [17]  129 	call	_center_ball
   004C F1            [10]  130 	pop	af
   004D C9            [10]  131 	ret
                            132 ;src/balls.c:38: void balls_update()
                            133 ;	---------------------------------
                            134 ; Function balls_update
                            135 ; ---------------------------------
   004E                     136 _balls_update::
                            137 ;src/balls.c:40: Ball *ball = balls;
   004E 01r00r00      [10]  138 	ld	bc, #_balls+0
                            139 ;src/balls.c:41: if (serving)
   0051 3Ar15r00      [13]  140 	ld	a,(#_serving + 0)
   0054 B7            [ 4]  141 	or	a, a
   0055 28 2D         [12]  142 	jr	Z,00115$
                            143 ;src/balls.c:43: center_ball(ball);
   0057 C5            [11]  144 	push	bc
   0058 C5            [11]  145 	push	bc
   0059 CDr42r01      [17]  146 	call	_center_ball
   005C F1            [10]  147 	pop	af
   005D C1            [10]  148 	pop	bc
                            149 ;src/balls.c:44: if (key_serve_is_pressed)
   005E 3Ar00r00      [13]  150 	ld	a,(#_key_serve_is_pressed + 0)
   0061 B7            [ 4]  151 	or	a, a
   0062 C8            [11]  152 	ret	Z
                            153 ;src/balls.c:46: serving = 0;
   0063 21r15r00      [10]  154 	ld	hl,#_serving + 0
   0066 36 00         [10]  155 	ld	(hl), #0x00
                            156 ;src/balls.c:47: ball->dx = 1; // 45 degrees right
   0068 21r05r00      [10]  157 	ld	hl, #(_balls + 0x0005)
   006B 36 01         [10]  158 	ld	(hl), #0x01
                            159 ;src/balls.c:48: ball->dy = -2;
   006D 21r06r00      [10]  160 	ld	hl, #(_balls + 0x0006)
   0070 36 FE         [10]  161 	ld	(hl), #0xfe
                            162 ;src/balls.c:49: ball->prev_x = ball->x;
   0072 69            [ 4]  163 	ld	l, c
   0073 60            [ 4]  164 	ld	h, b
   0074 23            [ 6]  165 	inc	hl
   0075 5E            [ 7]  166 	ld	e, (hl)
   0076 21r03r00      [10]  167 	ld	hl, #(_balls + 0x0003)
   0079 73            [ 7]  168 	ld	(hl), e
                            169 ;src/balls.c:50: ball->prev_y = ball->y;
   007A 69            [ 4]  170 	ld	l, c
   007B 60            [ 4]  171 	ld	h, b
   007C 23            [ 6]  172 	inc	hl
   007D 23            [ 6]  173 	inc	hl
   007E 4E            [ 7]  174 	ld	c, (hl)
   007F 21r04r00      [10]  175 	ld	hl, #(_balls + 0x0004)
   0082 71            [ 7]  176 	ld	(hl), c
   0083 C9            [10]  177 	ret
                            178 ;src/balls.c:55: for (u8 i = 0; i < MAX_BALLS; i++)
   0084                     179 00115$:
   0084 1E 00         [ 7]  180 	ld	e, #0x00
   0086                     181 00108$:
   0086 7B            [ 4]  182 	ld	a, e
   0087 D6 03         [ 7]  183 	sub	a, #0x03
   0089 D0            [11]  184 	ret	NC
                            185 ;src/balls.c:57: update_ball(ball);
   008A C5            [11]  186 	push	bc
   008B D5            [11]  187 	push	de
   008C C5            [11]  188 	push	bc
   008D CDr85r01      [17]  189 	call	_update_ball
   0090 F1            [10]  190 	pop	af
   0091 D1            [10]  191 	pop	de
   0092 C1            [10]  192 	pop	bc
                            193 ;src/balls.c:58: ball++;
   0093 21 07 00      [10]  194 	ld	hl, #0x0007
   0096 09            [11]  195 	add	hl,bc
   0097 4D            [ 4]  196 	ld	c, l
   0098 44            [ 4]  197 	ld	b, h
                            198 ;src/balls.c:55: for (u8 i = 0; i < MAX_BALLS; i++)
   0099 1C            [ 4]  199 	inc	e
   009A 18 EA         [12]  200 	jr	00108$
                            201 ;src/balls.c:63: void balls_restore_background()
                            202 ;	---------------------------------
                            203 ; Function balls_restore_background
                            204 ; ---------------------------------
   009C                     205 _balls_restore_background::
   009C DD E5         [15]  206 	push	ix
   009E DD 21 00 00   [14]  207 	ld	ix,#0
   00A2 DD 39         [15]  208 	add	ix,sp
   00A4 3B            [ 6]  209 	dec	sp
                            210 ;src/balls.c:65: Ball *ball = balls;
   00A5 01r00r00      [10]  211 	ld	bc, #_balls
                            212 ;src/balls.c:66: for (u8 i = 0; i < MAX_BALLS; i++)
   00A8 DD 36 FF 00   [19]  213 	ld	-1 (ix), #0x00
   00AC                     214 00105$:
   00AC DD 7E FF      [19]  215 	ld	a, -1 (ix)
   00AF D6 03         [ 7]  216 	sub	a, #0x03
   00B1 30 29         [12]  217 	jr	NC,00107$
                            218 ;src/balls.c:68: if (ball->active)
   00B3 0A            [ 7]  219 	ld	a, (bc)
   00B4 B7            [ 4]  220 	or	a, a
   00B5 28 1A         [12]  221 	jr	Z,00102$
                            222 ;src/balls.c:70: background_restore(ball->prev_x, balls->prev_y, SP_BALL_W, SP_BALL_H);
   00B7 21r04r00      [10]  223 	ld	hl, #_balls + 4
   00BA 5E            [ 7]  224 	ld	e, (hl)
   00BB 69            [ 4]  225 	ld	l, c
   00BC 60            [ 4]  226 	ld	h, b
   00BD 23            [ 6]  227 	inc	hl
   00BE 23            [ 6]  228 	inc	hl
   00BF 23            [ 6]  229 	inc	hl
   00C0 56            [ 7]  230 	ld	d, (hl)
   00C1 C5            [11]  231 	push	bc
   00C2 21 03 06      [10]  232 	ld	hl, #0x0603
   00C5 E5            [11]  233 	push	hl
   00C6 7B            [ 4]  234 	ld	a, e
   00C7 F5            [11]  235 	push	af
   00C8 33            [ 6]  236 	inc	sp
   00C9 D5            [11]  237 	push	de
   00CA 33            [ 6]  238 	inc	sp
   00CB CDr00r00      [17]  239 	call	_background_restore
   00CE F1            [10]  240 	pop	af
   00CF F1            [10]  241 	pop	af
   00D0 C1            [10]  242 	pop	bc
   00D1                     243 00102$:
                            244 ;src/balls.c:72: ball++;
   00D1 21 07 00      [10]  245 	ld	hl, #0x0007
   00D4 09            [11]  246 	add	hl,bc
   00D5 4D            [ 4]  247 	ld	c, l
   00D6 44            [ 4]  248 	ld	b, h
                            249 ;src/balls.c:66: for (u8 i = 0; i < MAX_BALLS; i++)
   00D7 DD 34 FF      [23]  250 	inc	-1 (ix)
   00DA 18 D0         [12]  251 	jr	00105$
   00DC                     252 00107$:
   00DC 33            [ 6]  253 	inc	sp
   00DD DD E1         [14]  254 	pop	ix
   00DF C9            [10]  255 	ret
                            256 ;src/balls.c:76: void balls_draw()
                            257 ;	---------------------------------
                            258 ; Function balls_draw
                            259 ; ---------------------------------
   00E0                     260 _balls_draw::
                            261 ;src/balls.c:80: for (u8 i = 0; i < MAX_BALLS; i++)
   00E0 0E 00         [ 7]  262 	ld	c, #0x00
   00E2                     263 00105$:
   00E2 79            [ 4]  264 	ld	a, c
   00E3 D6 03         [ 7]  265 	sub	a, #0x03
   00E5 D0            [11]  266 	ret	NC
                            267 ;src/balls.c:82: if (balls->active)
   00E6 3Ar00r00      [13]  268 	ld	a, (#_balls + 0)
   00E9 B7            [ 4]  269 	or	a, a
   00EA 28 1F         [12]  270 	jr	Z,00106$
                            271 ;src/balls.c:84: svmem = cpct_getScreenPtr(CPCT_VMEM_START, balls->x, balls->y);
   00EC 21r02r00      [10]  272 	ld	hl, #_balls + 2
   00EF 46            [ 7]  273 	ld	b, (hl)
   00F0 21r01r00      [10]  274 	ld	hl, #_balls + 1
   00F3 56            [ 7]  275 	ld	d, (hl)
   00F4 C5            [11]  276 	push	bc
   00F5 4A            [ 4]  277 	ld	c, d
   00F6 C5            [11]  278 	push	bc
   00F7 21 00 C0      [10]  279 	ld	hl, #0xc000
   00FA E5            [11]  280 	push	hl
   00FB CDr00r00      [17]  281 	call	_cpct_getScreenPtr
   00FE 11 03 06      [10]  282 	ld	de, #0x0603
   0101 D5            [11]  283 	push	de
   0102 E5            [11]  284 	push	hl
   0103 21r00r00      [10]  285 	ld	hl, #_sp_ball
   0106 E5            [11]  286 	push	hl
   0107 CDr00r00      [17]  287 	call	_cpct_drawSprite
   010A C1            [10]  288 	pop	bc
   010B                     289 00106$:
                            290 ;src/balls.c:80: for (u8 i = 0; i < MAX_BALLS; i++)
   010B 0C            [ 4]  291 	inc	c
   010C 18 D4         [12]  292 	jr	00105$
                            293 ;src/balls.c:90: Ball *balls_get_first_active()
                            294 ;	---------------------------------
                            295 ; Function balls_get_first_active
                            296 ; ---------------------------------
   010E                     297 _balls_get_first_active::
   010E DD E5         [15]  298 	push	ix
   0110 DD 21 00 00   [14]  299 	ld	ix,#0
   0114 DD 39         [15]  300 	add	ix,sp
   0116 F5            [11]  301 	push	af
                            302 ;src/balls.c:92: Ball *ball = balls;
   0117 DD 36 FEr00   [19]  303 	ld	-2 (ix), #<(_balls)
   011B DD 36 FFs00   [19]  304 	ld	-1 (ix), #>(_balls)
                            305 ;src/balls.c:93: for (u8 i = 0; i < MAX_BALLS; i++)
   011F E1            [10]  306 	pop	hl
   0120 E5            [11]  307 	push	hl
   0121 0E 00         [ 7]  308 	ld	c, #0x00
   0123                     309 00105$:
   0123 79            [ 4]  310 	ld	a, c
   0124 D6 03         [ 7]  311 	sub	a, #0x03
   0126 30 12         [12]  312 	jr	NC,00103$
                            313 ;src/balls.c:95: if (ball->active)
   0128 7E            [ 7]  314 	ld	a, (hl)
   0129 B7            [ 4]  315 	or	a, a
   012A 28 04         [12]  316 	jr	Z,00102$
                            317 ;src/balls.c:97: return ball;
   012C E1            [10]  318 	pop	hl
   012D E5            [11]  319 	push	hl
   012E 18 0D         [12]  320 	jr	00107$
   0130                     321 00102$:
                            322 ;src/balls.c:99: ball++;
   0130 11 07 00      [10]  323 	ld	de, #0x0007
   0133 19            [11]  324 	add	hl, de
   0134 33            [ 6]  325 	inc	sp
   0135 33            [ 6]  326 	inc	sp
   0136 E5            [11]  327 	push	hl
                            328 ;src/balls.c:93: for (u8 i = 0; i < MAX_BALLS; i++)
   0137 0C            [ 4]  329 	inc	c
   0138 18 E9         [12]  330 	jr	00105$
   013A                     331 00103$:
                            332 ;src/balls.c:101: return NULL;
   013A 21 00 00      [10]  333 	ld	hl, #0x0000
   013D                     334 00107$:
   013D DD F9         [10]  335 	ld	sp, ix
   013F DD E1         [14]  336 	pop	ix
   0141 C9            [10]  337 	ret
                            338 ;src/balls.c:107: void center_ball(Ball *ball)
                            339 ;	---------------------------------
                            340 ; Function center_ball
                            341 ; ---------------------------------
   0142                     342 _center_ball::
   0142 DD E5         [15]  343 	push	ix
   0144 DD 21 00 00   [14]  344 	ld	ix,#0
   0148 DD 39         [15]  345 	add	ix,sp
                            346 ;src/balls.c:109: ball->prev_x = ball->x;
   014A DD 4E 04      [19]  347 	ld	c,4 (ix)
   014D DD 46 05      [19]  348 	ld	b,5 (ix)
   0150 C5            [11]  349 	push	bc
   0151 FD E1         [14]  350 	pop	iy
   0153 FD 23         [10]  351 	inc	iy
   0155 FD 23         [10]  352 	inc	iy
   0157 FD 23         [10]  353 	inc	iy
   0159 59            [ 4]  354 	ld	e, c
   015A 50            [ 4]  355 	ld	d, b
   015B 13            [ 6]  356 	inc	de
   015C 1A            [ 7]  357 	ld	a, (de)
   015D FD 77 00      [19]  358 	ld	0 (iy), a
                            359 ;src/balls.c:110: ball->prev_y = ball->y;
   0160 FD 21 04 00   [14]  360 	ld	iy, #0x0004
   0164 FD 09         [15]  361 	add	iy, bc
   0166 03            [ 6]  362 	inc	bc
   0167 03            [ 6]  363 	inc	bc
   0168 0A            [ 7]  364 	ld	a, (bc)
   0169 FD 77 00      [19]  365 	ld	0 (iy), a
                            366 ;src/balls.c:111: ball->x = batX + (batW / 4);
   016C FD 21r00r00   [14]  367 	ld	iy, #_batW
   0170 FD 6E 00      [19]  368 	ld	l, 0 (iy)
   0173 CB 3D         [ 8]  369 	srl	l
   0175 CB 3D         [ 8]  370 	srl	l
   0177 3Ar00r00      [13]  371 	ld	a,(#_batX + 0)
   017A 85            [ 4]  372 	add	a, l
   017B 12            [ 7]  373 	ld	(de), a
                            374 ;src/balls.c:112: ball->y = batY - SP_BALL_H;
   017C 3Ar00r00      [13]  375 	ld	a,(#_batY + 0)
   017F C6 FA         [ 7]  376 	add	a, #0xfa
   0181 02            [ 7]  377 	ld	(bc), a
   0182 DD E1         [14]  378 	pop	ix
   0184 C9            [10]  379 	ret
                            380 ;src/balls.c:115: void update_ball(Ball *ball)
                            381 ;	---------------------------------
                            382 ; Function update_ball
                            383 ; ---------------------------------
   0185                     384 _update_ball::
   0185 DD E5         [15]  385 	push	ix
   0187 DD 21 00 00   [14]  386 	ld	ix,#0
   018B DD 39         [15]  387 	add	ix,sp
                            388 ;src/balls.c:117: ball->prev_x = ball->x;
   018D DD 4E 04      [19]  389 	ld	c,4 (ix)
   0190 DD 46 05      [19]  390 	ld	b,5 (ix)
   0193 59            [ 4]  391 	ld	e, c
   0194 50            [ 4]  392 	ld	d, b
   0195 13            [ 6]  393 	inc	de
   0196 13            [ 6]  394 	inc	de
   0197 13            [ 6]  395 	inc	de
   0198 69            [ 4]  396 	ld	l, c
   0199 60            [ 4]  397 	ld	h, b
   019A 23            [ 6]  398 	inc	hl
   019B 7E            [ 7]  399 	ld	a, (hl)
   019C 12            [ 7]  400 	ld	(de), a
                            401 ;src/balls.c:118: ball->prev_y = ball->y;
   019D 21 04 00      [10]  402 	ld	hl, #0x0004
   01A0 09            [11]  403 	add	hl,bc
   01A1 EB            [ 4]  404 	ex	de,hl
   01A2 69            [ 4]  405 	ld	l, c
   01A3 60            [ 4]  406 	ld	h, b
   01A4 23            [ 6]  407 	inc	hl
   01A5 23            [ 6]  408 	inc	hl
   01A6 7E            [ 7]  409 	ld	a, (hl)
   01A7 12            [ 7]  410 	ld	(de), a
                            411 ;src/balls.c:120: if (ball->active)
   01A8 0A            [ 7]  412 	ld	a, (bc)
   01A9 B7            [ 4]  413 	or	a, a
   01AA 28 1B         [12]  414 	jr	Z,00103$
                            415 ;src/balls.c:122: blocks_intersect_ball(ball);
   01AC C5            [11]  416 	push	bc
   01AD CDr00r00      [17]  417 	call	_blocks_intersect_ball
   01B0 F1            [10]  418 	pop	af
                            419 ;src/balls.c:124: move_ball_x(ball);
   01B1 DD 6E 04      [19]  420 	ld	l,4 (ix)
   01B4 DD 66 05      [19]  421 	ld	h,5 (ix)
   01B7 E5            [11]  422 	push	hl
   01B8 CDrCAr01      [17]  423 	call	_move_ball_x
   01BB F1            [10]  424 	pop	af
                            425 ;src/balls.c:125: move_ball_y(ball);
   01BC DD 6E 04      [19]  426 	ld	l,4 (ix)
   01BF DD 66 05      [19]  427 	ld	h,5 (ix)
   01C2 E5            [11]  428 	push	hl
   01C3 CDr1Er02      [17]  429 	call	_move_ball_y
   01C6 F1            [10]  430 	pop	af
   01C7                     431 00103$:
   01C7 DD E1         [14]  432 	pop	ix
   01C9 C9            [10]  433 	ret
                            434 ;src/balls.c:129: void move_ball_x(Ball *ball)
                            435 ;	---------------------------------
                            436 ; Function move_ball_x
                            437 ; ---------------------------------
   01CA                     438 _move_ball_x::
   01CA DD E5         [15]  439 	push	ix
   01CC DD 21 00 00   [14]  440 	ld	ix,#0
   01D0 DD 39         [15]  441 	add	ix,sp
                            442 ;src/balls.c:131: u8 new_x = ball->x + ball->dx;
   01D2 DD 5E 04      [19]  443 	ld	e,4 (ix)
   01D5 DD 56 05      [19]  444 	ld	d,5 (ix)
   01D8 D5            [11]  445 	push	de
   01D9 FD E1         [14]  446 	pop	iy
   01DB FD 23         [10]  447 	inc	iy
   01DD FD 46 00      [19]  448 	ld	b, 0 (iy)
   01E0 13            [ 6]  449 	inc	de
   01E1 13            [ 6]  450 	inc	de
   01E2 13            [ 6]  451 	inc	de
   01E3 13            [ 6]  452 	inc	de
   01E4 13            [ 6]  453 	inc	de
   01E5 1A            [ 7]  454 	ld	a, (de)
   01E6 4F            [ 4]  455 	ld	c, a
   01E7 68            [ 4]  456 	ld	l, b
   01E8 09            [11]  457 	add	hl, bc
                            458 ;src/balls.c:133: if (ball->dx > 0)
   01E9 AF            [ 4]  459 	xor	a, a
   01EA 91            [ 4]  460 	sub	a, c
   01EB E2rF0r01      [10]  461 	jp	PO, 00124$
   01EE EE 80         [ 7]  462 	xor	a, #0x80
   01F0                     463 00124$:
   01F0 F2r08r02      [10]  464 	jp	P, 00108$
                            465 ;src/balls.c:136: if (new_x >= PLAY_AREA_RIGHT_EDGE - SP_BALL_W)
   01F3 7D            [ 4]  466 	ld	a, l
   01F4 D6 3D         [ 7]  467 	sub	a, #0x3d
   01F6 38 0B         [12]  468 	jr	C,00102$
                            469 ;src/balls.c:138: ball->x = PLAY_AREA_RIGHT_EDGE - SP_BALL_W;
   01F8 FD 36 00 3D   [19]  470 	ld	0 (iy), #0x3d
                            471 ;src/balls.c:139: ball->dx = -ball->dx;
   01FC 1A            [ 7]  472 	ld	a, (de)
   01FD 4F            [ 4]  473 	ld	c, a
   01FE AF            [ 4]  474 	xor	a, a
   01FF 91            [ 4]  475 	sub	a, c
   0200 12            [ 7]  476 	ld	(de), a
   0201 18 18         [12]  477 	jr	00110$
   0203                     478 00102$:
                            479 ;src/balls.c:143: ball->x = new_x;
   0203 FD 75 00      [19]  480 	ld	0 (iy), l
   0206 18 13         [12]  481 	jr	00110$
   0208                     482 00108$:
                            483 ;src/balls.c:150: if (new_x <= PLAY_AREA_LEFT_EDGE)
   0208 3E 0C         [ 7]  484 	ld	a, #0x0c
   020A 95            [ 4]  485 	sub	a, l
   020B 38 0B         [12]  486 	jr	C,00105$
                            487 ;src/balls.c:152: ball->x = PLAY_AREA_LEFT_EDGE;
   020D FD 36 00 0C   [19]  488 	ld	0 (iy), #0x0c
                            489 ;src/balls.c:153: ball->dx = -ball->dx;
   0211 1A            [ 7]  490 	ld	a, (de)
   0212 4F            [ 4]  491 	ld	c, a
   0213 AF            [ 4]  492 	xor	a, a
   0214 91            [ 4]  493 	sub	a, c
   0215 12            [ 7]  494 	ld	(de), a
   0216 18 03         [12]  495 	jr	00110$
   0218                     496 00105$:
                            497 ;src/balls.c:157: ball->x = new_x;
   0218 FD 75 00      [19]  498 	ld	0 (iy), l
   021B                     499 00110$:
   021B DD E1         [14]  500 	pop	ix
   021D C9            [10]  501 	ret
                            502 ;src/balls.c:164: void move_ball_y(Ball *ball)
                            503 ;	---------------------------------
                            504 ; Function move_ball_y
                            505 ; ---------------------------------
   021E                     506 _move_ball_y::
   021E DD E5         [15]  507 	push	ix
   0220 DD 21 00 00   [14]  508 	ld	ix,#0
   0224 DD 39         [15]  509 	add	ix,sp
   0226 F5            [11]  510 	push	af
                            511 ;src/balls.c:167: u8 new_y = ball->y + ball->dy;
   0227 DD 4E 04      [19]  512 	ld	c,4 (ix)
   022A DD 46 05      [19]  513 	ld	b,5 (ix)
   022D 59            [ 4]  514 	ld	e, c
   022E 50            [ 4]  515 	ld	d, b
   022F 13            [ 6]  516 	inc	de
   0230 13            [ 6]  517 	inc	de
   0231 1A            [ 7]  518 	ld	a, (de)
   0232 DD 77 FF      [19]  519 	ld	-1 (ix), a
   0235 FD 21 06 00   [14]  520 	ld	iy, #0x0006
   0239 FD 09         [15]  521 	add	iy, bc
   023B FD 6E 00      [19]  522 	ld	l, 0 (iy)
   023E DD 7E FF      [19]  523 	ld	a, -1 (ix)
   0241 85            [ 4]  524 	add	a, l
   0242 DD 77 FE      [19]  525 	ld	-2 (ix), a
                            526 ;src/balls.c:170: if (ball->dy < 0)
   0245 CB 7D         [ 8]  527 	bit	7, l
   0247 28 1A         [12]  528 	jr	Z,00108$
                            529 ;src/balls.c:172: if (new_y <= PLAY_AREA_TOP_EDGE)
   0249 3E 08         [ 7]  530 	ld	a, #0x08
   024B DD 96 FE      [19]  531 	sub	a, -2 (ix)
   024E 38 0D         [12]  532 	jr	C,00102$
                            533 ;src/balls.c:174: ball->y = PLAY_AREA_TOP_EDGE;
   0250 3E 08         [ 7]  534 	ld	a, #0x08
   0252 12            [ 7]  535 	ld	(de), a
                            536 ;src/balls.c:175: ball->dy = -ball->dy;
   0253 FD 4E 00      [19]  537 	ld	c, 0 (iy)
   0256 AF            [ 4]  538 	xor	a, a
   0257 91            [ 4]  539 	sub	a, c
   0258 FD 77 00      [19]  540 	ld	0 (iy), a
   025B 18 26         [12]  541 	jr	00109$
   025D                     542 00102$:
                            543 ;src/balls.c:179: ball->y = new_y;
   025D DD 7E FE      [19]  544 	ld	a, -2 (ix)
   0260 12            [ 7]  545 	ld	(de), a
   0261 18 20         [12]  546 	jr	00109$
   0263                     547 00108$:
                            548 ;src/balls.c:186: if (new_y >= YOUR_DEAD_PIXEL_ROW)
   0263 DD 7E FE      [19]  549 	ld	a, -2 (ix)
   0266 D6 C2         [ 7]  550 	sub	a, #0xc2
   0268 38 0C         [12]  551 	jr	C,00105$
                            552 ;src/balls.c:189: ball->active = 0;
   026A AF            [ 4]  553 	xor	a, a
   026B 02            [ 7]  554 	ld	(bc), a
                            555 ;src/balls.c:190: ball->dy = -ball->dy;
   026C FD 4E 00      [19]  556 	ld	c, 0 (iy)
   026F AF            [ 4]  557 	xor	a, a
   0270 91            [ 4]  558 	sub	a, c
   0271 FD 77 00      [19]  559 	ld	0 (iy), a
   0274 18 0D         [12]  560 	jr	00109$
   0276                     561 00105$:
                            562 ;src/balls.c:195: check_bat_collision(ball, new_y);
   0276 D5            [11]  563 	push	de
   0277 DD 7E FE      [19]  564 	ld	a, -2 (ix)
   027A F5            [11]  565 	push	af
   027B 33            [ 6]  566 	inc	sp
   027C C5            [11]  567 	push	bc
   027D CDr8Cr02      [17]  568 	call	_check_bat_collision
   0280 F1            [10]  569 	pop	af
   0281 33            [ 6]  570 	inc	sp
   0282 D1            [10]  571 	pop	de
   0283                     572 00109$:
                            573 ;src/balls.c:198: ball->y = new_y;
   0283 DD 7E FE      [19]  574 	ld	a, -2 (ix)
   0286 12            [ 7]  575 	ld	(de), a
   0287 DD F9         [10]  576 	ld	sp, ix
   0289 DD E1         [14]  577 	pop	ix
   028B C9            [10]  578 	ret
                            579 ;src/balls.c:201: void check_bat_collision(Ball *ball, u8 new_y)
                            580 ;	---------------------------------
                            581 ; Function check_bat_collision
                            582 ; ---------------------------------
   028C                     583 _check_bat_collision::
   028C DD E5         [15]  584 	push	ix
   028E DD 21 00 00   [14]  585 	ld	ix,#0
   0292 DD 39         [15]  586 	add	ix,sp
   0294 F5            [11]  587 	push	af
   0295 F5            [11]  588 	push	af
                            589 ;src/balls.c:203: if ((ball->x + SP_BALL_W >= batX && ball->x <= batX + batW) &&
   0296 DD 7E 04      [19]  590 	ld	a, 4 (ix)
   0299 DD 77 FE      [19]  591 	ld	-2 (ix), a
   029C DD 7E 05      [19]  592 	ld	a, 5 (ix)
   029F DD 77 FF      [19]  593 	ld	-1 (ix), a
   02A2 C1            [10]  594 	pop	bc
   02A3 E1            [10]  595 	pop	hl
   02A4 E5            [11]  596 	push	hl
   02A5 C5            [11]  597 	push	bc
   02A6 23            [ 6]  598 	inc	hl
   02A7 4E            [ 7]  599 	ld	c, (hl)
   02A8 06 00         [ 7]  600 	ld	b, #0x00
   02AA 21 03 00      [10]  601 	ld	hl, #0x0003
   02AD 09            [11]  602 	add	hl,bc
   02AE E3            [19]  603 	ex	(sp), hl
   02AF 21r00r00      [10]  604 	ld	hl,#_batX + 0
   02B2 5E            [ 7]  605 	ld	e, (hl)
   02B3 16 00         [ 7]  606 	ld	d, #0x00
   02B5 DD 7E FC      [19]  607 	ld	a, -4 (ix)
   02B8 93            [ 4]  608 	sub	a, e
   02B9 DD 7E FD      [19]  609 	ld	a, -3 (ix)
   02BC 9A            [ 4]  610 	sbc	a, d
   02BD E2rC2r02      [10]  611 	jp	PO, 00124$
   02C0 EE 80         [ 7]  612 	xor	a, #0x80
   02C2                     613 00124$:
   02C2 FAr1Er03      [10]  614 	jp	M, 00106$
   02C5 FD 21r00r00   [14]  615 	ld	iy, #_batW
   02C9 FD 6E 00      [19]  616 	ld	l, 0 (iy)
   02CC 26 00         [ 7]  617 	ld	h, #0x00
   02CE 19            [11]  618 	add	hl, de
   02CF 7D            [ 4]  619 	ld	a, l
   02D0 91            [ 4]  620 	sub	a, c
   02D1 7C            [ 4]  621 	ld	a, h
   02D2 98            [ 4]  622 	sbc	a, b
   02D3 E2rD8r02      [10]  623 	jp	PO, 00125$
   02D6 EE 80         [ 7]  624 	xor	a, #0x80
   02D8                     625 00125$:
   02D8 FAr1Er03      [10]  626 	jp	M, 00106$
                            627 ;src/balls.c:204: (ball->y + SP_BALL_H >= batY && ball->y < batY + SP_BAT_LEFT_H))
   02DB C1            [10]  628 	pop	bc
   02DC E1            [10]  629 	pop	hl
   02DD E5            [11]  630 	push	hl
   02DE C5            [11]  631 	push	bc
   02DF 23            [ 6]  632 	inc	hl
   02E0 23            [ 6]  633 	inc	hl
   02E1 4E            [ 7]  634 	ld	c, (hl)
   02E2 06 00         [ 7]  635 	ld	b, #0x00
   02E4 21 06 00      [10]  636 	ld	hl, #0x0006
   02E7 09            [11]  637 	add	hl,bc
   02E8 EB            [ 4]  638 	ex	de,hl
   02E9 FD 21r00r00   [14]  639 	ld	iy, #_batY
   02ED FD 6E 00      [19]  640 	ld	l, 0 (iy)
   02F0 26 00         [ 7]  641 	ld	h, #0x00
   02F2 7B            [ 4]  642 	ld	a, e
   02F3 95            [ 4]  643 	sub	a, l
   02F4 7A            [ 4]  644 	ld	a, d
   02F5 9C            [ 4]  645 	sbc	a, h
   02F6 E2rFBr02      [10]  646 	jp	PO, 00126$
   02F9 EE 80         [ 7]  647 	xor	a, #0x80
   02FB                     648 00126$:
   02FB FAr1Er03      [10]  649 	jp	M, 00106$
   02FE 11 08 00      [10]  650 	ld	de, #0x0008
   0301 19            [11]  651 	add	hl, de
   0302 79            [ 4]  652 	ld	a, c
   0303 95            [ 4]  653 	sub	a, l
   0304 78            [ 4]  654 	ld	a, b
   0305 9C            [ 4]  655 	sbc	a, h
   0306 E2r0Br03      [10]  656 	jp	PO, 00127$
   0309 EE 80         [ 7]  657 	xor	a, #0x80
   030B                     658 00127$:
   030B F2r1Er03      [10]  659 	jp	P, 00106$
                            660 ;src/balls.c:206: ball->dy = -ball->dy;
   030E DD 7E FE      [19]  661 	ld	a, -2 (ix)
   0311 C6 06         [ 7]  662 	add	a, #0x06
   0313 6F            [ 4]  663 	ld	l, a
   0314 DD 7E FF      [19]  664 	ld	a, -1 (ix)
   0317 CE 00         [ 7]  665 	adc	a, #0x00
   0319 67            [ 4]  666 	ld	h, a
   031A 4E            [ 7]  667 	ld	c, (hl)
   031B AF            [ 4]  668 	xor	a, a
   031C 91            [ 4]  669 	sub	a, c
   031D 77            [ 7]  670 	ld	(hl), a
   031E                     671 00106$:
   031E DD F9         [10]  672 	ld	sp, ix
   0320 DD E1         [14]  673 	pop	ix
   0322 C9            [10]  674 	ret
                            675 	.area _CODE
                            676 	.area _INITIALIZER
                            677 	.area _CABS (ABS)
